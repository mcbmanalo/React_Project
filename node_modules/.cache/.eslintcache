[{"/home/mcbmanalo/React_Personal_Project/src/index.js":"1","/home/mcbmanalo/React_Personal_Project/src/App.js":"2","/home/mcbmanalo/React_Personal_Project/src/pages/Home.js":"3","/home/mcbmanalo/React_Personal_Project/src/pages/Movies.js":"4","/home/mcbmanalo/React_Personal_Project/src/pages/TVSeries.js":"5","/home/mcbmanalo/React_Personal_Project/src/pages/Random.js":"6","/home/mcbmanalo/React_Personal_Project/src/modules/Header.js":"7","/home/mcbmanalo/React_Personal_Project/src/modules/GenreOptions.js":"8","/home/mcbmanalo/React_Personal_Project/src/modules/Generator.js":"9","/home/mcbmanalo/React_Personal_Project/src/modules/Pagination.js":"10","/home/mcbmanalo/React_Personal_Project/src/modules/Loading.js":"11"},{"size":305,"mtime":1633202956384,"results":"12","hashOfConfig":"13"},{"size":6048,"mtime":1633202956384,"results":"14","hashOfConfig":"13"},{"size":220,"mtime":1633202956384,"results":"15","hashOfConfig":"13"},{"size":2646,"mtime":1633202956384,"results":"16","hashOfConfig":"13"},{"size":2596,"mtime":1633202956384,"results":"17","hashOfConfig":"13"},{"size":1378,"mtime":1633203575344,"results":"18","hashOfConfig":"13"},{"size":859,"mtime":1633202956384,"results":"19","hashOfConfig":"13"},{"size":1558,"mtime":1633202956384,"results":"20","hashOfConfig":"13"},{"size":1123,"mtime":1633202956384,"results":"21","hashOfConfig":"13"},{"size":1248,"mtime":1633202956384,"results":"22","hashOfConfig":"13"},{"size":207,"mtime":1633202956384,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"r5fcf",{"filePath":"27","messages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"31","messages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"26"},{"filePath":"34","messages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"26"},{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"26"},{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"/home/mcbmanalo/React_Personal_Project/src/index.js",[],["50","51"],"/home/mcbmanalo/React_Personal_Project/src/App.js",[],"/home/mcbmanalo/React_Personal_Project/src/pages/Home.js",[],"/home/mcbmanalo/React_Personal_Project/src/pages/Movies.js",["52"],"import React, {useState, useContext, useEffect} from 'react';\nimport { UserContext } from \"../App\";\nimport Pagination from \"../modules/Pagination\";\nimport Loading from \"../modules/Loading\";\n\nconst imagepath = process.env.REACT_APP_POSTER_PATH\nconst discoverMovie = process.env.REACT_APP_MOVIE_LIST\nconst key = process.env.REACT_APP_API_KEY\n\nconst Movies = () => {\n  const [movieList, setNewMovieList] = useState([])\n  const [loading, setLoading] = useState(false)\n  const [currentPage, setCurrentPage] = useState(1)\n  const [lastPage, setLastPage] = useState(1)\n  const user = useContext(UserContext);\n  const {movieGenre: genres} = user;\n\n  const getMovieList = async() => {\n    const movieListResponse = await fetch(discoverMovie)\n    const jsonMovieList = await movieListResponse.json()\n    setNewMovieList(jsonMovieList.results)\n    setCurrentPage(jsonMovieList.page)\n    setLastPage(jsonMovieList.total_pages)\n    setLoading(false)\n  }\n\n  const getGenres = (genreIDs) => {\n    let movieGenre = []\n    genres.map((genre) => {\n      if (genreIDs.includes(genre.id)) movieGenre.push(genre.name)\n    })\n    return movieGenre.join(', ')\n  }\n\n  const setPagination = (pageNumber) => {\n    setLoading(true)\n    setCurrentPage(pageNumber)\n    generateNewMoviesPage(pageNumber)\n  }\n\n  const generateNewMoviesPage = async(page) => {\n    let discoverMovieLink = `https://api.themoviedb.org/3/discover/movie?api_key=${key}&language=en-US&sort_by=popularity.desc&page=${page}`\n    const newMovieList = await fetch(discoverMovieLink)\n    const newMovieListResult = await newMovieList.json()\n    setNewMovieList(newMovieListResult.results)\n    setLoading(false)\n  }\n\n  const generateMovies = () => {\n    if (movieList.length > 0) {\n      return (\n        movieList.map((movie) => {\n          return (\n            <div key={movie.id} className='movie'>\n              <img className='image' alt={movie.title} src={imagepath + movie.poster_path}/>\n              <div className='movieContent'>\n                <div>{movie.title}</div> \n                <div>{getGenres(movie.genre_ids)}</div>\n                <div>Release Date: {movie.release_date}</div>\n                <div>{movie.overview}</div>\n              </div>\n            </div>\n          )\n        })\n      )\n    }\n  }\n\n  useEffect(() => {\n    setLoading(true)\n    getMovieList()\n  }, [])\n\n  return (\n    <div>\n      {\n        loading ? \n        <Loading/> :\n        <div>\n          <div>\n           {generateMovies()}\n          </div>\n          <Pagination currentPage={currentPage} setCurrentPage={setPagination} lastPage={lastPage}/>\n        </div>\n      }\n    </div>\n  )\n}\n\nexport default Movies;","/home/mcbmanalo/React_Personal_Project/src/pages/TVSeries.js",["53"],"import React, {useState, useContext, useEffect} from 'react';\nimport { UserContext } from \"../App\";\nimport Pagination from \"../modules/Pagination\";\nimport Loading from \"../modules/Loading\";\n\nconst imagepath = process.env.REACT_APP_POSTER_PATH\nconst discoverTV = process.env.REACT_APP_TV_LIST \nconst key = process.env.REACT_APP_API_KEY\n\nconst TVSeries = () => {\n  const [tvList, setNewTVList] = useState([])\n  const [loading, setLoading] = useState(false)\n  const [currentPage, setCurrentPage] = useState(1)\n  const [lastPage, setLastPage] = useState(1)\n  const user = useContext(UserContext);\n  const {tvGenre:genres} = user;\n\n  const getTVList = async() => {\n    const tvListResponse = await fetch(discoverTV)\n    const jsonTVList = await tvListResponse.json()\n    setNewTVList(jsonTVList.results)\n    setCurrentPage(jsonTVList.page)\n    setLastPage(jsonTVList.total_pages)\n    setLoading(false)\n  }\n\n  const getGenres = (genreIDs) => {\n    let movieGenre = []\n    genres.map((genre) => {\n      if (genreIDs.includes(genre.id)) movieGenre.push(genre.name)\n    })\n    return movieGenre.join(', ')\n  }\n\n  const setPagination = (pageNumber) => {\n    setLoading(true)\n    setCurrentPage(pageNumber)\n    generateNewTVPage(pageNumber)\n  }\n\n  const generateNewTVPage = async(page) => {\n    let discoverTVLink = `https://api.themoviedb.org/3/discover/tv?api_key=${key}&language=en-US&sort_by=popularity.desc&page=${page}`\n    const newTVList = await fetch(discoverTVLink)\n    const newTVListResult = await newTVList.json()\n    setNewTVList(newTVListResult.results)\n    setLoading(false)\n  }\n\n  const generateTVShows = () => {\n    if (tvList.length > 0) {\n      return (\n        tvList.map((series) => {\n          return (\n            <div key={series.id} className='movie'>\n              <img className='image' alt={series.name} src={imagepath + series.poster_path}/>\n              <div className='movieContent'>\n                <div>{series.name}</div> \n                <div>{getGenres(series.genre_ids)}</div>\n                <div>First Air Date: {series.first_air_date}</div>\n                <div>{series.overview}</div>\n              </div>\n            </div>\n          )\n        })\n      )\n    }\n  }\n\n  useEffect(() => {\n    setLoading(true)\n    getTVList()\n  }, [])\n\n  return (\n    <div className='App'>\n      {\n        loading ? \n        <Loading/> :\n        <div>\n          <div>\n            {generateTVShows()}\n          </div>\n          <Pagination currentPage={currentPage} setCurrentPage={setPagination} lastPage={lastPage}/>\n        </div>\n      }\n    </div>\n  )\n}\n\nexport default TVSeries;","/home/mcbmanalo/React_Personal_Project/src/pages/Random.js",["54"],"/home/mcbmanalo/React_Personal_Project/src/modules/Header.js",[],"/home/mcbmanalo/React_Personal_Project/src/modules/GenreOptions.js",[],"/home/mcbmanalo/React_Personal_Project/src/modules/Generator.js",["55"],"import React, {useContext, useState, useEffect} from 'react';\nimport { UserContext } from '../App'\n\nconst Generator = () => {\n  const user = useContext(UserContext);\n  const {selectedGenres, generateMovieTV, isMaxGenre} = user\n  const [isSelectedGenreEmpty, setIsSelectedGenre] = useState(true)\n\n  const setSelectedGenres = () => {\n    const userSelectedGenres = selectedGenres.map(genre => genre.name)\n    return (\n      <div className='selectedGenres'>Selected Genres: {userSelectedGenres.join(', ')}</div>\n    )\n  }\n\n  const checkSelectedGenre = () => {\n    if (selectedGenres.length > 0) return setIsSelectedGenre(false)\n    return setIsSelectedGenre(true)\n  }\n\n  useEffect(() => {\n    checkSelectedGenre()\n  }, [selectedGenres])\n\n  return (\n    <div className='App-generator'>\n      <div className='quotes' onClick={generateMovieTV}>\n        Surprise yourself!\n        {isSelectedGenreEmpty ? <div></div> : setSelectedGenres()}\n        { isMaxGenre ? <div className='error'>Reached max number of allowable genres. (max 3)</div> :\n          <div></div>\n        }\n      </div>\n    </div>\n  )\n}\n\nexport default Generator;","/home/mcbmanalo/React_Personal_Project/src/modules/Pagination.js",[],"/home/mcbmanalo/React_Personal_Project/src/modules/Loading.js",[],{"ruleId":"56","replacedBy":"57"},{"ruleId":"58","replacedBy":"59"},{"ruleId":"60","severity":1,"message":"61","line":29,"column":24,"nodeType":"62","messageId":"63","endLine":29,"endColumn":26},{"ruleId":"60","severity":1,"message":"61","line":29,"column":24,"nodeType":"62","messageId":"63","endLine":29,"endColumn":26},{"ruleId":"60","severity":1,"message":"61","line":14,"column":24,"nodeType":"62","messageId":"63","endLine":14,"endColumn":26},{"ruleId":"64","severity":1,"message":"65","line":23,"column":6,"nodeType":"66","endLine":23,"endColumn":22,"suggestions":"67"},"no-native-reassign",["68"],"no-negated-in-lhs",["69"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'checkSelectedGenre'. Either include it or remove the dependency array.","ArrayExpression",["70"],"no-global-assign","no-unsafe-negation",{"desc":"71","fix":"72"},"Update the dependencies array to be: [checkSelectedGenre, selectedGenres]",{"range":"73","text":"74"},[716,732],"[checkSelectedGenre, selectedGenres]"]