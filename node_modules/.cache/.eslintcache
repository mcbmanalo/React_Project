[{"/home/mcbmanalo/React_Personal_Project/movie-suggestion/src/index.js":"1","/home/mcbmanalo/React_Personal_Project/movie-suggestion/src/App.js":"2","/home/mcbmanalo/React_Personal_Project/movie-suggestion/src/modules/Header.js":"3","/home/mcbmanalo/React_Personal_Project/movie-suggestion/src/modules/GenreOptions.js":"4","/home/mcbmanalo/React_Personal_Project/movie-suggestion/src/modules/Generator.js":"5","/home/mcbmanalo/React_Personal_Project/movie-suggestion/src/pages/Home.js":"6","/home/mcbmanalo/React_Personal_Project/movie-suggestion/src/pages/Movies.js":"7","/home/mcbmanalo/React_Personal_Project/movie-suggestion/src/pages/TVSeries.js":"8","/home/mcbmanalo/React_Personal_Project/movie-suggestion/src/pages/Random.js":"9","/home/mcbmanalo/React_Personal_Project/movie-suggestion/src/modules/Pagination.js":"10","/home/mcbmanalo/React_Personal_Project/movie-suggestion/src/modules/Loading.js":"11","/home/mcbmanalo/React_Personal_Project/src/index.js":"12","/home/mcbmanalo/React_Personal_Project/src/App.js":"13","/home/mcbmanalo/React_Personal_Project/src/pages/Home.js":"14","/home/mcbmanalo/React_Personal_Project/src/pages/Movies.js":"15","/home/mcbmanalo/React_Personal_Project/src/pages/TVSeries.js":"16","/home/mcbmanalo/React_Personal_Project/src/pages/Random.js":"17","/home/mcbmanalo/React_Personal_Project/src/modules/Header.js":"18","/home/mcbmanalo/React_Personal_Project/src/modules/GenreOptions.js":"19","/home/mcbmanalo/React_Personal_Project/src/modules/Generator.js":"20","/home/mcbmanalo/React_Personal_Project/src/modules/Pagination.js":"21","/home/mcbmanalo/React_Personal_Project/src/modules/Loading.js":"22"},{"size":305,"mtime":1633202621984,"results":"23","hashOfConfig":"24"},{"size":6048,"mtime":1633202311664,"results":"25","hashOfConfig":"24"},{"size":859,"mtime":1633202184854,"results":"26","hashOfConfig":"24"},{"size":1558,"mtime":1633202176644,"results":"27","hashOfConfig":"24"},{"size":1123,"mtime":1633202208684,"results":"28","hashOfConfig":"24"},{"size":220,"mtime":1633201263464,"results":"29","hashOfConfig":"24"},{"size":2646,"mtime":1633202220374,"results":"30","hashOfConfig":"24"},{"size":2596,"mtime":1633201299844,"results":"31","hashOfConfig":"24"},{"size":1244,"mtime":1633201289764,"results":"32","hashOfConfig":"24"},{"size":1248,"mtime":1633201254184,"results":"33","hashOfConfig":"24"},{"size":207,"mtime":1633201244234,"results":"34","hashOfConfig":"24"},{"size":305,"mtime":1633202956384,"results":"35","hashOfConfig":"36"},{"size":6048,"mtime":1633202956384,"results":"37","hashOfConfig":"36"},{"size":220,"mtime":1633202956384,"results":"38","hashOfConfig":"36"},{"size":2646,"mtime":1633202956384,"results":"39","hashOfConfig":"36"},{"size":2596,"mtime":1633202956384,"results":"40","hashOfConfig":"36"},{"size":1378,"mtime":1633203306594,"results":"41","hashOfConfig":"36"},{"size":859,"mtime":1633202956384,"results":"42","hashOfConfig":"36"},{"size":1558,"mtime":1633202956384,"results":"43","hashOfConfig":"36"},{"size":1123,"mtime":1633202956384,"results":"44","hashOfConfig":"36"},{"size":1248,"mtime":1633202956384,"results":"45","hashOfConfig":"36"},{"size":207,"mtime":1633202956384,"results":"46","hashOfConfig":"36"},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1vp8d45",{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"51"},{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"51"},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"51"},{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"51"},{"filePath":"70","messages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"72","messages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"74","messages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"r5fcf",{"filePath":"76","messages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"82","messages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"84","messages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"86","messages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"90","messages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"92","messages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/mcbmanalo/React_Personal_Project/movie-suggestion/src/index.js",[],"/home/mcbmanalo/React_Personal_Project/movie-suggestion/src/App.js",[],["96","97"],"/home/mcbmanalo/React_Personal_Project/movie-suggestion/src/modules/Header.js",[],"/home/mcbmanalo/React_Personal_Project/movie-suggestion/src/modules/GenreOptions.js",[],"/home/mcbmanalo/React_Personal_Project/movie-suggestion/src/modules/Generator.js",["98"],"import React, {useContext, useState, useEffect} from 'react';\nimport { UserContext } from '../App'\n\nconst Generator = () => {\n  const user = useContext(UserContext);\n  const {selectedGenres, generateMovieTV, isMaxGenre} = user\n  const [isSelectedGenreEmpty, setIsSelectedGenre] = useState(true)\n\n  const setSelectedGenres = () => {\n    const userSelectedGenres = selectedGenres.map(genre => genre.name)\n    return (\n      <div className='selectedGenres'>Selected Genres: {userSelectedGenres.join(', ')}</div>\n    )\n  }\n\n  const checkSelectedGenre = () => {\n    if (selectedGenres.length > 0) return setIsSelectedGenre(false)\n    return setIsSelectedGenre(true)\n  }\n\n  useEffect(() => {\n    checkSelectedGenre()\n  }, [selectedGenres])\n\n  return (\n    <div className='App-generator'>\n      <div className='quotes' onClick={generateMovieTV}>\n        Surprise yourself!\n        {isSelectedGenreEmpty ? <div></div> : setSelectedGenres()}\n        { isMaxGenre ? <div className='error'>Reached max number of allowable genres. (max 3)</div> :\n          <div></div>\n        }\n      </div>\n    </div>\n  )\n}\n\nexport default Generator;","/home/mcbmanalo/React_Personal_Project/movie-suggestion/src/pages/Home.js",[],"/home/mcbmanalo/React_Personal_Project/movie-suggestion/src/pages/Movies.js",["99"],"import React, {useState, useContext, useEffect} from 'react';\nimport { UserContext } from \"../App\";\nimport Pagination from \"../modules/Pagination\";\nimport Loading from \"../modules/Loading\";\n\nconst imagepath = process.env.REACT_APP_POSTER_PATH\nconst discoverMovie = process.env.REACT_APP_MOVIE_LIST\nconst key = process.env.REACT_APP_API_KEY\n\nconst Movies = () => {\n  const [movieList, setNewMovieList] = useState([])\n  const [loading, setLoading] = useState(false)\n  const [currentPage, setCurrentPage] = useState(1)\n  const [lastPage, setLastPage] = useState(1)\n  const user = useContext(UserContext);\n  const {movieGenre: genres} = user;\n\n  const getMovieList = async() => {\n    const movieListResponse = await fetch(discoverMovie)\n    const jsonMovieList = await movieListResponse.json()\n    setNewMovieList(jsonMovieList.results)\n    setCurrentPage(jsonMovieList.page)\n    setLastPage(jsonMovieList.total_pages)\n    setLoading(false)\n  }\n\n  const getGenres = (genreIDs) => {\n    let movieGenre = []\n    genres.map((genre) => {\n      if (genreIDs.includes(genre.id)) movieGenre.push(genre.name)\n    })\n    return movieGenre.join(', ')\n  }\n\n  const setPagination = (pageNumber) => {\n    setLoading(true)\n    setCurrentPage(pageNumber)\n    generateNewMoviesPage(pageNumber)\n  }\n\n  const generateNewMoviesPage = async(page) => {\n    let discoverMovieLink = `https://api.themoviedb.org/3/discover/movie?api_key=${key}&language=en-US&sort_by=popularity.desc&page=${page}`\n    const newMovieList = await fetch(discoverMovieLink)\n    const newMovieListResult = await newMovieList.json()\n    setNewMovieList(newMovieListResult.results)\n    setLoading(false)\n  }\n\n  const generateMovies = () => {\n    if (movieList.length > 0) {\n      return (\n        movieList.map((movie) => {\n          return (\n            <div key={movie.id} className='movie'>\n              <img className='image' alt={movie.title} src={imagepath + movie.poster_path}/>\n              <div className='movieContent'>\n                <div>{movie.title}</div> \n                <div>{getGenres(movie.genre_ids)}</div>\n                <div>Release Date: {movie.release_date}</div>\n                <div>{movie.overview}</div>\n              </div>\n            </div>\n          )\n        })\n      )\n    }\n  }\n\n  useEffect(() => {\n    setLoading(true)\n    getMovieList()\n  }, [])\n\n  return (\n    <div>\n      {\n        loading ? \n        <Loading/> :\n        <div>\n          <div>\n           {generateMovies()}\n          </div>\n          <Pagination currentPage={currentPage} setCurrentPage={setPagination} lastPage={lastPage}/>\n        </div>\n      }\n    </div>\n  )\n}\n\nexport default Movies;","/home/mcbmanalo/React_Personal_Project/movie-suggestion/src/pages/TVSeries.js",["100"],"import React, {useState, useContext, useEffect} from 'react';\nimport { UserContext } from \"../App\";\nimport Pagination from \"../modules/Pagination\";\nimport Loading from \"../modules/Loading\";\n\nconst imagepath = process.env.REACT_APP_POSTER_PATH\nconst discoverTV = process.env.REACT_APP_TV_LIST \nconst key = process.env.REACT_APP_API_KEY\n\nconst TVSeries = () => {\n  const [tvList, setNewTVList] = useState([])\n  const [loading, setLoading] = useState(false)\n  const [currentPage, setCurrentPage] = useState(1)\n  const [lastPage, setLastPage] = useState(1)\n  const user = useContext(UserContext);\n  const {tvGenre:genres} = user;\n\n  const getTVList = async() => {\n    const tvListResponse = await fetch(discoverTV)\n    const jsonTVList = await tvListResponse.json()\n    setNewTVList(jsonTVList.results)\n    setCurrentPage(jsonTVList.page)\n    setLastPage(jsonTVList.total_pages)\n    setLoading(false)\n  }\n\n  const getGenres = (genreIDs) => {\n    let movieGenre = []\n    genres.map((genre) => {\n      if (genreIDs.includes(genre.id)) movieGenre.push(genre.name)\n    })\n    return movieGenre.join(', ')\n  }\n\n  const setPagination = (pageNumber) => {\n    setLoading(true)\n    setCurrentPage(pageNumber)\n    generateNewTVPage(pageNumber)\n  }\n\n  const generateNewTVPage = async(page) => {\n    let discoverTVLink = `https://api.themoviedb.org/3/discover/tv?api_key=${key}&language=en-US&sort_by=popularity.desc&page=${page}`\n    const newTVList = await fetch(discoverTVLink)\n    const newTVListResult = await newTVList.json()\n    setNewTVList(newTVListResult.results)\n    setLoading(false)\n  }\n\n  const generateTVShows = () => {\n    if (tvList.length > 0) {\n      return (\n        tvList.map((series) => {\n          return (\n            <div key={series.id} className='movie'>\n              <img className='image' alt={series.name} src={imagepath + series.poster_path}/>\n              <div className='movieContent'>\n                <div>{series.name}</div> \n                <div>{getGenres(series.genre_ids)}</div>\n                <div>First Air Date: {series.first_air_date}</div>\n                <div>{series.overview}</div>\n              </div>\n            </div>\n          )\n        })\n      )\n    }\n  }\n\n  useEffect(() => {\n    setLoading(true)\n    getTVList()\n  }, [])\n\n  return (\n    <div className='App'>\n      {\n        loading ? \n        <Loading/> :\n        <div>\n          <div>\n            {generateTVShows()}\n          </div>\n          <Pagination currentPage={currentPage} setCurrentPage={setPagination} lastPage={lastPage}/>\n        </div>\n      }\n    </div>\n  )\n}\n\nexport default TVSeries;","/home/mcbmanalo/React_Personal_Project/movie-suggestion/src/pages/Random.js",["101"],"import { useContext } from \"react\"\nimport { SuggestContext } from \"../App\"\nimport Loading from \"../modules/Loading\"\n\nconst imagepath = process.env.REACT_APP_POSTER_PATH\n\nconst Random = () => {\n  const suggested = useContext(SuggestContext)\n  const {suggestedMovie, genres, loading, isMovie} = suggested\n\n  const getGenres = (genreIDs) => {\n    if (loading || genreIDs === undefined) return ''\n    let movieGenre = []\n    genres.map((genre) => {\n      if (genreIDs.includes(genre.id)) movieGenre.push(genre.name)\n    })\n    return movieGenre.join(', ')\n  }\n  \n  return (\n    <div>\n      {loading ? \n        <Loading/> \n        :\n        <div className='movie'>\n          <img className='image' alt={suggestedMovie.title} src={imagepath + suggestedMovie.poster_path}/>\n          <div className='movieContent'>\n            <div>{suggestedMovie.title}</div>\n            <div>{getGenres(suggestedMovie.genre_ids)}</div>\n            {\n              isMovie ?\n                <div>Release Date: {suggestedMovie.release_date}</div> :\n                <div>First Air Date: {suggestedMovie.first_air_date}</div>\n            }\n            <div>{suggestedMovie.overview}</div>\n          </div>\n        </div>\n      }\n    </div>\n  )\n}\n\nexport default Random;","/home/mcbmanalo/React_Personal_Project/movie-suggestion/src/modules/Pagination.js",[],"/home/mcbmanalo/React_Personal_Project/movie-suggestion/src/modules/Loading.js",[],"/home/mcbmanalo/React_Personal_Project/src/index.js",[],"/home/mcbmanalo/React_Personal_Project/src/App.js",[],"/home/mcbmanalo/React_Personal_Project/src/pages/Home.js",[],"/home/mcbmanalo/React_Personal_Project/src/pages/Movies.js",["102"],"/home/mcbmanalo/React_Personal_Project/src/pages/TVSeries.js",["103"],"/home/mcbmanalo/React_Personal_Project/src/pages/Random.js",["104"],"/home/mcbmanalo/React_Personal_Project/src/modules/Header.js",[],"/home/mcbmanalo/React_Personal_Project/src/modules/GenreOptions.js",[],"/home/mcbmanalo/React_Personal_Project/src/modules/Generator.js",["105"],"/home/mcbmanalo/React_Personal_Project/src/modules/Pagination.js",[],"/home/mcbmanalo/React_Personal_Project/src/modules/Loading.js",[],{"ruleId":"106","replacedBy":"107"},{"ruleId":"108","replacedBy":"109"},{"ruleId":"110","severity":1,"message":"111","line":23,"column":6,"nodeType":"112","endLine":23,"endColumn":22,"suggestions":"113"},{"ruleId":"114","severity":1,"message":"115","line":29,"column":24,"nodeType":"116","messageId":"117","endLine":29,"endColumn":26},{"ruleId":"114","severity":1,"message":"115","line":29,"column":24,"nodeType":"116","messageId":"117","endLine":29,"endColumn":26},{"ruleId":"114","severity":1,"message":"115","line":14,"column":24,"nodeType":"116","messageId":"117","endLine":14,"endColumn":26},{"ruleId":"114","severity":1,"message":"115","line":29,"column":24,"nodeType":"116","messageId":"117","endLine":29,"endColumn":26},{"ruleId":"114","severity":1,"message":"115","line":29,"column":24,"nodeType":"116","messageId":"117","endLine":29,"endColumn":26},{"ruleId":"114","severity":1,"message":"115","line":14,"column":24,"nodeType":"116","messageId":"117","endLine":14,"endColumn":26},{"ruleId":"110","severity":1,"message":"111","line":23,"column":6,"nodeType":"112","endLine":23,"endColumn":22,"suggestions":"118"},"no-native-reassign",["119"],"no-negated-in-lhs",["120"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'checkSelectedGenre'. Either include it or remove the dependency array.","ArrayExpression",["121"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside",["122"],"no-global-assign","no-unsafe-negation",{"desc":"123","fix":"124"},{"desc":"123","fix":"125"},"Update the dependencies array to be: [checkSelectedGenre, selectedGenres]",{"range":"126","text":"127"},{"range":"128","text":"127"},[716,732],"[checkSelectedGenre, selectedGenres]",[716,732]]