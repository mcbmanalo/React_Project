{"ast":null,"code":"import _regeneratorRuntime from\"/home/mcbmanalo/React_Personal_Project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/home/mcbmanalo/React_Personal_Project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/home/mcbmanalo/React_Personal_Project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useContext,useEffect}from'react';import{UserContext}from\"../App\";import Pagination from\"../modules/Pagination\";import Loading from\"../modules/Loading\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var imagepath=process.env.REACT_APP_POSTER_PATH;var discoverTV=process.env.REACT_APP_TV_LIST;var key=process.env.REACT_APP_API_KEY;var TVSeries=function TVSeries(){var _useState=useState([]),_useState2=_slicedToArray(_useState,2),tvList=_useState2[0],setNewTVList=_useState2[1];var _useState3=useState(false),_useState4=_slicedToArray(_useState3,2),loading=_useState4[0],setLoading=_useState4[1];var _useState5=useState(1),_useState6=_slicedToArray(_useState5,2),currentPage=_useState6[0],setCurrentPage=_useState6[1];var _useState7=useState(1),_useState8=_slicedToArray(_useState7,2),lastPage=_useState8[0],setLastPage=_useState8[1];var user=useContext(UserContext);var genres=user.tvGenre;var getTVList=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var tvListResponse,jsonTVList;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return fetch(discoverTV);case 2:tvListResponse=_context.sent;_context.next=5;return tvListResponse.json();case 5:jsonTVList=_context.sent;setNewTVList(jsonTVList.results);setCurrentPage(jsonTVList.page);setLastPage(jsonTVList.total_pages);setLoading(false);case 10:case\"end\":return _context.stop();}}},_callee);}));return function getTVList(){return _ref.apply(this,arguments);};}();var getGenres=function getGenres(genreIDs){var movieGenre=[];genres.map(function(genre){if(genreIDs.includes(genre.id))movieGenre.push(genre.name);});return movieGenre.join(', ');};var setPagination=function setPagination(pageNumber){setLoading(true);setCurrentPage(pageNumber);generateNewTVPage(pageNumber);};var generateNewTVPage=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(page){var discoverTVLink,newTVList,newTVListResult;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:discoverTVLink=\"https://api.themoviedb.org/3/discover/tv?api_key=\".concat(key,\"&language=en-US&sort_by=popularity.desc&page=\").concat(page);_context2.next=3;return fetch(discoverTVLink);case 3:newTVList=_context2.sent;_context2.next=6;return newTVList.json();case 6:newTVListResult=_context2.sent;setNewTVList(newTVListResult.results);setLoading(false);case 9:case\"end\":return _context2.stop();}}},_callee2);}));return function generateNewTVPage(_x){return _ref2.apply(this,arguments);};}();var generateTVShows=function generateTVShows(){if(tvList.length>0){return tvList.map(function(series){return/*#__PURE__*/_jsxs(\"div\",{className:\"movie\",children:[/*#__PURE__*/_jsx(\"img\",{className:\"image\",alt:series.name,src:imagepath+series.poster_path}),/*#__PURE__*/_jsxs(\"div\",{className:\"movieContent\",children:[/*#__PURE__*/_jsx(\"div\",{children:series.name}),/*#__PURE__*/_jsx(\"div\",{children:getGenres(series.genre_ids)}),/*#__PURE__*/_jsxs(\"div\",{children:[\"First Air Date: \",series.first_air_date]}),/*#__PURE__*/_jsx(\"div\",{children:series.overview})]})]},series.id);});}};useEffect(function(){setLoading(true);getTVList();},[]);return/*#__PURE__*/_jsx(\"div\",{className:\"App\",children:loading?/*#__PURE__*/_jsx(Loading,{}):/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"div\",{children:generateTVShows()}),/*#__PURE__*/_jsx(Pagination,{currentPage:currentPage,setCurrentPage:setPagination,lastPage:lastPage})]})});};export default TVSeries;","map":{"version":3,"sources":["/home/mcbmanalo/React_Personal_Project/src/pages/TVSeries.js"],"names":["React","useState","useContext","useEffect","UserContext","Pagination","Loading","imagepath","process","env","REACT_APP_POSTER_PATH","discoverTV","REACT_APP_TV_LIST","key","REACT_APP_API_KEY","TVSeries","tvList","setNewTVList","loading","setLoading","currentPage","setCurrentPage","lastPage","setLastPage","user","genres","tvGenre","getTVList","fetch","tvListResponse","json","jsonTVList","results","page","total_pages","getGenres","genreIDs","movieGenre","map","genre","includes","id","push","name","join","setPagination","pageNumber","generateNewTVPage","discoverTVLink","newTVList","newTVListResult","generateTVShows","length","series","poster_path","genre_ids","first_air_date","overview"],"mappings":"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","sourcesContent":["import React, {useState, useContext, useEffect} from 'react';\nimport { UserContext } from \"../App\";\nimport Pagination from \"../modules/Pagination\";\nimport Loading from \"../modules/Loading\";\n\nconst imagepath = process.env.REACT_APP_POSTER_PATH\nconst discoverTV = process.env.REACT_APP_TV_LIST \nconst key = process.env.REACT_APP_API_KEY\n\nconst TVSeries = () => {\n  const [tvList, setNewTVList] = useState([])\n  const [loading, setLoading] = useState(false)\n  const [currentPage, setCurrentPage] = useState(1)\n  const [lastPage, setLastPage] = useState(1)\n  const user = useContext(UserContext);\n  const {tvGenre:genres} = user;\n\n  const getTVList = async() => {\n    const tvListResponse = await fetch(discoverTV)\n    const jsonTVList = await tvListResponse.json()\n    setNewTVList(jsonTVList.results)\n    setCurrentPage(jsonTVList.page)\n    setLastPage(jsonTVList.total_pages)\n    setLoading(false)\n  }\n\n  const getGenres = (genreIDs) => {\n    let movieGenre = []\n    genres.map((genre) => {\n      if (genreIDs.includes(genre.id)) movieGenre.push(genre.name)\n    })\n    return movieGenre.join(', ')\n  }\n\n  const setPagination = (pageNumber) => {\n    setLoading(true)\n    setCurrentPage(pageNumber)\n    generateNewTVPage(pageNumber)\n  }\n\n  const generateNewTVPage = async(page) => {\n    let discoverTVLink = `https://api.themoviedb.org/3/discover/tv?api_key=${key}&language=en-US&sort_by=popularity.desc&page=${page}`\n    const newTVList = await fetch(discoverTVLink)\n    const newTVListResult = await newTVList.json()\n    setNewTVList(newTVListResult.results)\n    setLoading(false)\n  }\n\n  const generateTVShows = () => {\n    if (tvList.length > 0) {\n      return (\n        tvList.map((series) => {\n          return (\n            <div key={series.id} className='movie'>\n              <img className='image' alt={series.name} src={imagepath + series.poster_path}/>\n              <div className='movieContent'>\n                <div>{series.name}</div> \n                <div>{getGenres(series.genre_ids)}</div>\n                <div>First Air Date: {series.first_air_date}</div>\n                <div>{series.overview}</div>\n              </div>\n            </div>\n          )\n        })\n      )\n    }\n  }\n\n  useEffect(() => {\n    setLoading(true)\n    getTVList()\n  }, [])\n\n  return (\n    <div className='App'>\n      {\n        loading ? \n        <Loading/> :\n        <div>\n          <div>\n            {generateTVShows()}\n          </div>\n          <Pagination currentPage={currentPage} setCurrentPage={setPagination} lastPage={lastPage}/>\n        </div>\n      }\n    </div>\n  )\n}\n\nexport default TVSeries;"]},"metadata":{},"sourceType":"module"}