{"ast":null,"code":"var _jsxFileName = \"/home/mcbmanalo/React_Personal_Project/movie-suggestion/src/pages/Movies.js\",\n    _s = $RefreshSig$();\n\nimport Header from \"../modules/Header\";\nimport React, { useState, useContext, useEffect } from 'react';\nimport { UserContext } from \"../App\";\nimport Pagination from \"../modules/Pagination\";\nimport Loading from \"../modules/Loading\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst imagepath = process.env.REACT_APP_POSTER_PATH;\nconst discoverMovie = process.env.REACT_APP_MOVIE_LIST;\nconst key = process.env.REACT_APP_API_KEY;\n\nconst Movies = () => {\n  _s();\n\n  const [movieList, setNewMovieList] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [lastPage, setLastPage] = useState(1);\n  const user = useContext(UserContext);\n  const {\n    movieGenre: genres\n  } = user;\n\n  const getMovieList = async () => {\n    const movieListResponse = await fetch(discoverMovie);\n    const jsonMovieList = await movieListResponse.json();\n    setNewMovieList(jsonMovieList.results);\n    setCurrentPage(jsonMovieList.page);\n    setLastPage(jsonMovieList.total_pages);\n    setLoading(false);\n  };\n\n  const getGenres = genreIDs => {\n    let movieGenre = [];\n    genres.map(genre => {\n      if (genreIDs.includes(genre.id)) movieGenre.push(genre.name);\n    });\n    return movieGenre.join(', ');\n  };\n\n  const setPagination = pageNumber => {\n    setLoading(true);\n    setCurrentPage(pageNumber);\n    generateNewMoviesPage(pageNumber);\n  };\n\n  const generateNewMoviesPage = async page => {\n    let discoverMovieLink = `https://api.themoviedb.org/3/discover/movie?api_key=${key}&language=en-US&sort_by=popularity.desc&page=${page}`;\n    const newMovieList = await fetch(discoverMovieLink);\n    const newMovieListResult = await newMovieList.json();\n    setNewMovieList(newMovieListResult.results);\n    setLoading(false);\n  };\n\n  const generateMovies = () => {\n    if (movieList.length > 0) {\n      return movieList.map(movie => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"movie\",\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            className: \"image\",\n            alt: movie.title,\n            src: imagepath + movie.poster_path\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"movieContent\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              children: movie.title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 58,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: getGenres(movie.genre_ids)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 59,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [\"Release Date: \", movie.release_date]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 60,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: movie.overview\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 61,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 15\n          }, this)]\n        }, movie.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 13\n        }, this);\n      });\n    }\n  };\n\n  useEffect(() => {\n    setLoading(true);\n    getMovieList();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: loading ? /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: generateMovies()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Pagination, {\n        currentPage: currentPage,\n        setCurrentPage: setPagination,\n        lastPage: lastPage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Movies, \"/ilB2yZBUgVOaivOuUlP3jeCMTw=\");\n\n_c = Movies;\nexport default Movies;\n\nvar _c;\n\n$RefreshReg$(_c, \"Movies\");","map":{"version":3,"sources":["/home/mcbmanalo/React_Personal_Project/movie-suggestion/src/pages/Movies.js"],"names":["Header","React","useState","useContext","useEffect","UserContext","Pagination","Loading","imagepath","process","env","REACT_APP_POSTER_PATH","discoverMovie","REACT_APP_MOVIE_LIST","key","REACT_APP_API_KEY","Movies","movieList","setNewMovieList","loading","setLoading","currentPage","setCurrentPage","lastPage","setLastPage","user","movieGenre","genres","getMovieList","movieListResponse","fetch","jsonMovieList","json","results","page","total_pages","getGenres","genreIDs","map","genre","includes","id","push","name","join","setPagination","pageNumber","generateNewMoviesPage","discoverMovieLink","newMovieList","newMovieListResult","generateMovies","length","movie","title","poster_path","genre_ids","release_date","overview"],"mappings":"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","sourcesContent":["import Header from \"../modules/Header\";\nimport React, {useState, useContext, useEffect} from 'react';\nimport { UserContext } from \"../App\";\nimport Pagination from \"../modules/Pagination\";\nimport Loading from \"../modules/Loading\";\n\nconst imagepath = process.env.REACT_APP_POSTER_PATH\nconst discoverMovie = process.env.REACT_APP_MOVIE_LIST\nconst key = process.env.REACT_APP_API_KEY\n\nconst Movies = () => {\n  const [movieList, setNewMovieList] = useState([])\n  const [loading, setLoading] = useState(false)\n  const [currentPage, setCurrentPage] = useState(1)\n  const [lastPage, setLastPage] = useState(1)\n  const user = useContext(UserContext);\n  const {movieGenre: genres} = user;\n\n  const getMovieList = async() => {\n    const movieListResponse = await fetch(discoverMovie)\n    const jsonMovieList = await movieListResponse.json()\n    setNewMovieList(jsonMovieList.results)\n    setCurrentPage(jsonMovieList.page)\n    setLastPage(jsonMovieList.total_pages)\n    setLoading(false)\n  }\n\n  const getGenres = (genreIDs) => {\n    let movieGenre = []\n    genres.map((genre) => {\n      if (genreIDs.includes(genre.id)) movieGenre.push(genre.name)\n    })\n    return movieGenre.join(', ')\n  }\n\n  const setPagination = (pageNumber) => {\n    setLoading(true)\n    setCurrentPage(pageNumber)\n    generateNewMoviesPage(pageNumber)\n  }\n\n  const generateNewMoviesPage = async(page) => {\n    let discoverMovieLink = `https://api.themoviedb.org/3/discover/movie?api_key=${key}&language=en-US&sort_by=popularity.desc&page=${page}`\n    const newMovieList = await fetch(discoverMovieLink)\n    const newMovieListResult = await newMovieList.json()\n    setNewMovieList(newMovieListResult.results)\n    setLoading(false)\n  }\n\n  const generateMovies = () => {\n    if (movieList.length > 0) {\n      return (\n        movieList.map((movie) => {\n          return (\n            <div key={movie.id} className='movie'>\n              <img className='image' alt={movie.title} src={imagepath + movie.poster_path}/>\n              <div className='movieContent'>\n                <div>{movie.title}</div> \n                <div>{getGenres(movie.genre_ids)}</div>\n                <div>Release Date: {movie.release_date}</div>\n                <div>{movie.overview}</div>\n              </div>\n            </div>\n          )\n        })\n      )\n    }\n  }\n\n  useEffect(() => {\n    setLoading(true)\n    getMovieList()\n  }, [])\n\n  return (\n    <div>\n      {\n        loading ? \n        <Loading/> :\n        <div>\n          <div>\n           {generateMovies()}\n          </div>\n          <Pagination currentPage={currentPage} setCurrentPage={setPagination} lastPage={lastPage}/>\n        </div>\n      }\n    </div>\n  )\n}\n\nexport default Movies;"]},"metadata":{},"sourceType":"module"}