{"ast":null,"code":"var _jsxFileName = \"/home/mcbmanalo/React_Personal_Project/movie-suggestion/src/App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport React, { useState, useEffect } from 'react';\nimport { Switch, Route, useHistory } from 'react-router-dom';\nimport Home from './pages/Home';\nimport Movies from './pages/Movies';\nimport TVSeries from './pages/TVSeries';\nimport Random from './pages/Random';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const UserContext = /*#__PURE__*/React.createContext();\nexport const MovieContext = /*#__PURE__*/React.createContext();\nexport const SuggestContext = /*#__PURE__*/React.createContext();\nconst key = process.env.REACT_APP_API_KEY;\nconst movieGenreLink = process.env.REACT_APP_MOVIE_GENRE_URI;\nconst tvGenreLink = process.env.REACT_APP_TV_GENRE_URI;\nconst discoverMovie = process.env.REACT_APP_MOVIE_LIST; // try moving the fetching data of movies to movie page later\n\nconst discoverTV = process.env.REACT_APP_TV_LIST; // try moving the fetching data of movies to tv series page later\n\nconst UserProvider = props => {\n  const {\n    children,\n    generateMovieTV,\n    addSelectedGenre,\n    movieGenre,\n    tvGenre,\n    resetSelectedGenres,\n    isMovie,\n    setMovieOption\n  } = props;\n  return /*#__PURE__*/_jsxDEV(UserContext.Provider, {\n    value: {\n      generateMovieTV,\n      addSelectedGenre,\n      movieGenre,\n      tvGenre,\n      resetSelectedGenres,\n      isMovie,\n      setMovieOption\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 5\n  }, this);\n};\n\n_c = UserProvider;\n\nconst MovieProvider = props => {\n  const {\n    children,\n    movieList,\n    tvList\n  } = props;\n  return /*#__PURE__*/_jsxDEV(MovieContext.Provider, {\n    value: {\n      movieList,\n      tvList\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n};\n\n_c2 = MovieProvider;\n\nconst SuggestProvider = props => {\n  const {\n    children,\n    suggestedMovie,\n    loading\n  } = props;\n  return /*#__PURE__*/_jsxDEV(SuggestContext.Provider, {\n    value: {\n      suggestedMovie,\n      loading\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n};\n\n_c3 = SuggestProvider;\n\nconst App = props => {\n  _s();\n\n  const [selectedGenres, setSelectedGenres] = useState([]);\n  const [movieGenre, setMovieGenre] = useState([]);\n  const [tvGenre, setTVGenre] = useState([]);\n  const [movieList, setMovieList] = useState([]);\n  const [tvList, settvList] = useState([]);\n  const [isMovie, setIsMovie] = useState([true]);\n  const [suggestedMovie, setSuggestedMovie] = useState({});\n  const [loading, setLoading] = useState(false);\n  const history = useHistory();\n\n  const addSelectedGenres = genre => {\n    if (selectedGenres.includes(genre)) return;\n    let chosenGenre = [...selectedGenres];\n\n    if (isMovie) {\n      movieGenre.map(genreItem => {\n        if (genreItem.name === genre) return chosenGenre.push(genreItem);\n        return null;\n      });\n      console.log(chosenGenre);\n      setSelectedGenres(chosenGenre);\n      return;\n    }\n\n    tvGenre.map(genreItem => {\n      if (genreItem.name === genre) return chosenGenre.push(genreItem);\n      return null;\n    });\n    console.log(chosenGenre);\n    setSelectedGenres(chosenGenre);\n  };\n\n  const resetSelectedGenres = value => {\n    setSelectedGenres(value);\n  };\n\n  const setMovieOption = value => {\n    setIsMovie(value);\n  };\n\n  const getGenres = async () => {\n    const movieResponse = await fetch(movieGenreLink);\n    const tvResponse = await fetch(tvGenreLink);\n    const jsonMovie = await movieResponse.json();\n    const jsonTV = await tvResponse.json();\n    setMovieGenre(jsonMovie.genres);\n    setTVGenre(jsonTV.genres);\n  };\n\n  const getMovieList = async () => {\n    const movieListResponse = await fetch(discoverMovie);\n    const jsonMovieList = await movieListResponse.json();\n    setMovieList(jsonMovieList);\n  };\n\n  const getTVList = async () => {\n    const TVListResponse = await fetch(discoverTV);\n    const jsonTVList = await TVListResponse.json();\n    settvList(jsonTVList);\n  };\n\n  const makeDiscoverLink = async (type, includedGenres) => {\n    let linkGenres = includedGenres.join('%2C');\n    let discoverLink = `https://api.themoviedb.org/3/discover/${type}?api_key=${key}&language=en-US&sort_by=popularity.desc&include_adult=true&include_video=false&page=1&with_genres=${includedGenres}`;\n    console.log(discoverLink);\n    const discoverResponse = await fetch(discoverLink);\n    const discoverJson = await discoverResponse.json();\n    let max = discoverJson.total_pages + 1;\n    let min = discoverJson.page;\n    let page = Math.floor(Math.random() * (max - min)) + min;\n    let finalLink = `https://api.themoviedb.org/3/discover/${type}?api_key=${key}&language=en-US&sort_by=popularity.desc&include_adult=true&include_video=false&page=${page}&with_genres=${includedGenres}`;\n    const finalResponse = await fetch(finalLink);\n    const finalJson = await finalResponse.json();\n    let movie = finalJson.results[Math.floor(Math.random() * finalJson.results.length)];\n    setSuggestedMovie(movie);\n    console.log(movie);\n  };\n\n  const generateMovieTV = () => {\n    if (isMovie) {\n      const genres = selectedGenres.map(genre => genre.id);\n      makeDiscoverLink('movie', genres);\n    }\n\n    console.log('IsMovie');\n    console.log(isMovie);\n    console.log('Selected genre');\n    console.log(selectedGenres);\n    console.log('movieList');\n    console.log(movieList);\n    console.log('tvList');\n    console.log(tvList);\n    history.push('/suggest');\n  };\n\n  useEffect(() => {\n    getGenres();\n    getMovieList();\n    getTVList();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(UserProvider, {\n    generateMovieTV: generateMovieTV,\n    addSelectedGenre: addSelectedGenres,\n    movieGenre: movieGenre,\n    tvGenre: tvGenre,\n    resetSelectedGenres: resetSelectedGenres,\n    isMovie: isMovie,\n    setMovieOption: setMovieOption,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(Switch, {\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          path: \"/\",\n          component: Home,\n          exact: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(MovieProvider, {\n          movieList: movieList,\n          tvList: tvList,\n          children: [/*#__PURE__*/_jsxDEV(Route, {\n            path: \"/movies\",\n            component: Movies\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 163,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Route, {\n            path: \"/tv-series\",\n            component: TVSeries\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 164,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(SuggestProvider, {\n            suggestedMovie: suggestedMovie,\n            loading: loading,\n            children: /*#__PURE__*/_jsxDEV(Route, {\n              path: \"/suggest\",\n              component: Random\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 166,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"TMDb\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"This product uses the TMDB API but is not endorsed or certified by TMDB\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          className: \"TMDB-logo\",\n          src: \"https://www.themoviedb.org/assets/2/v4/logos/v2/blue_short-8e7b30f73a4020692ccca9c88bafe5dcb6f8a62a4c6bc55cd9ba82bb2cd95f6c.svg\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 151,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"5Pb9x0lTNu5aR3rurao9+q1Jvv4=\", false, function () {\n  return [useHistory];\n});\n\n_c4 = App;\nexport default App;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"UserProvider\");\n$RefreshReg$(_c2, \"MovieProvider\");\n$RefreshReg$(_c3, \"SuggestProvider\");\n$RefreshReg$(_c4, \"App\");","map":{"version":3,"sources":["/home/mcbmanalo/React_Personal_Project/movie-suggestion/src/App.js"],"names":["React","useState","useEffect","Switch","Route","useHistory","Home","Movies","TVSeries","Random","UserContext","createContext","MovieContext","SuggestContext","key","process","env","REACT_APP_API_KEY","movieGenreLink","REACT_APP_MOVIE_GENRE_URI","tvGenreLink","REACT_APP_TV_GENRE_URI","discoverMovie","REACT_APP_MOVIE_LIST","discoverTV","REACT_APP_TV_LIST","UserProvider","props","children","generateMovieTV","addSelectedGenre","movieGenre","tvGenre","resetSelectedGenres","isMovie","setMovieOption","MovieProvider","movieList","tvList","SuggestProvider","suggestedMovie","loading","App","selectedGenres","setSelectedGenres","setMovieGenre","setTVGenre","setMovieList","settvList","setIsMovie","setSuggestedMovie","setLoading","history","addSelectedGenres","genre","includes","chosenGenre","map","genreItem","name","push","console","log","value","getGenres","movieResponse","fetch","tvResponse","jsonMovie","json","jsonTV","genres","getMovieList","movieListResponse","jsonMovieList","getTVList","TVListResponse","jsonTVList","makeDiscoverLink","type","includedGenres","linkGenres","join","discoverLink","discoverResponse","discoverJson","max","total_pages","min","page","Math","floor","random","finalLink","finalResponse","finalJson","movie","results","length","id"],"mappings":";;;AAAA,OAAO,WAAP;AACA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SACEC,MADF,EAEEC,KAFF,EAGEC,UAHF,QAIO,kBAJP;AAKA,OAAOC,IAAP,MAAiB,cAAjB;AACA,OAAOC,MAAP,MAAmB,gBAAnB;AACA,OAAOC,QAAP,MAAqB,kBAArB;AACA,OAAOC,MAAP,MAAmB,gBAAnB;;AAEA,OAAO,MAAMC,WAAW,gBAAGV,KAAK,CAACW,aAAN,EAApB;AACP,OAAO,MAAMC,YAAY,gBAAGZ,KAAK,CAACW,aAAN,EAArB;AACP,OAAO,MAAME,cAAc,gBAAGb,KAAK,CAACW,aAAN,EAAvB;AACP,MAAMG,GAAG,GAAGC,OAAO,CAACC,GAAR,CAAYC,iBAAxB;AACA,MAAMC,cAAc,GAAGH,OAAO,CAACC,GAAR,CAAYG,yBAAnC;AACA,MAAMC,WAAW,GAAGL,OAAO,CAACC,GAAR,CAAYK,sBAAhC;AACA,MAAMC,aAAa,GAAGP,OAAO,CAACC,GAAR,CAAYO,oBAAlC,C,CAAuD;;AACvD,MAAMC,UAAU,GAAGT,OAAO,CAACC,GAAR,CAAYS,iBAA/B,C,CAAiD;;AAEjD,MAAMC,YAAY,GAAIC,KAAD,IAAW;AAC9B,QAAM;AAACC,IAAAA,QAAD;AAAWC,IAAAA,eAAX;AAA4BC,IAAAA,gBAA5B;AAA8CC,IAAAA,UAA9C;AAA0DC,IAAAA,OAA1D;AAAmEC,IAAAA,mBAAnE;AAAwFC,IAAAA,OAAxF;AAAiGC,IAAAA;AAAjG,MAAmHR,KAAzH;AACA,sBACE,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAE;AAACE,MAAAA,eAAD;AAAkBC,MAAAA,gBAAlB;AAAoCC,MAAAA,UAApC;AAAgDC,MAAAA,OAAhD;AAAyDC,MAAAA,mBAAzD;AAA8EC,MAAAA,OAA9E;AAAuFC,MAAAA;AAAvF,KAA7B;AAAA,cACGP;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CAPD;;KAAMF,Y;;AASN,MAAMU,aAAa,GAAIT,KAAD,IAAW;AAC/B,QAAM;AAACC,IAAAA,QAAD;AAAWS,IAAAA,SAAX;AAAsBC,IAAAA;AAAtB,MAAgCX,KAAtC;AACA,sBACE,QAAC,YAAD,CAAc,QAAd;AAAuB,IAAA,KAAK,EAAE;AAACU,MAAAA,SAAD;AAAYC,MAAAA;AAAZ,KAA9B;AAAA,cACGV;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CAPD;;MAAMQ,a;;AASN,MAAMG,eAAe,GAAIZ,KAAD,IAAW;AACjC,QAAM;AAACC,IAAAA,QAAD;AAAWY,IAAAA,cAAX;AAA2BC,IAAAA;AAA3B,MAAsCd,KAA5C;AACA,sBACE,QAAC,cAAD,CAAgB,QAAhB;AAAyB,IAAA,KAAK,EAAE;AAACa,MAAAA,cAAD;AAAiBC,MAAAA;AAAjB,KAAhC;AAAA,cACGb;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CAPD;;MAAMW,e;;AASN,MAAMG,GAAG,GAAGf,KAAK,IAAI;AAAA;;AACnB,QAAM,CAACgB,cAAD,EAAiBC,iBAAjB,IAAsC3C,QAAQ,CAAC,EAAD,CAApD;AACA,QAAM,CAAC8B,UAAD,EAAac,aAAb,IAA8B5C,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM,CAAC+B,OAAD,EAAUc,UAAV,IAAwB7C,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAACoC,SAAD,EAAYU,YAAZ,IAA4B9C,QAAQ,CAAC,EAAD,CAA1C;AACA,QAAM,CAACqC,MAAD,EAASU,SAAT,IAAsB/C,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACiC,OAAD,EAAUe,UAAV,IAAwBhD,QAAQ,CAAC,CAAC,IAAD,CAAD,CAAtC;AACA,QAAM,CAACuC,cAAD,EAAiBU,iBAAjB,IAAsCjD,QAAQ,CAAC,EAAD,CAApD;AACA,QAAM,CAACwC,OAAD,EAAUU,UAAV,IAAwBlD,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAMmD,OAAO,GAAG/C,UAAU,EAA1B;;AAEA,QAAMgD,iBAAiB,GAAIC,KAAD,IAAW;AACnC,QAAIX,cAAc,CAACY,QAAf,CAAwBD,KAAxB,CAAJ,EAAoC;AACpC,QAAIE,WAAW,GAAG,CAAC,GAAGb,cAAJ,CAAlB;;AACA,QAAIT,OAAJ,EAAa;AACXH,MAAAA,UAAU,CAAC0B,GAAX,CAAgBC,SAAD,IAAe;AAC5B,YAAIA,SAAS,CAACC,IAAV,KAAmBL,KAAvB,EAA8B,OAAOE,WAAW,CAACI,IAAZ,CAAiBF,SAAjB,CAAP;AAC9B,eAAO,IAAP;AACD,OAHD;AAIAG,MAAAA,OAAO,CAACC,GAAR,CAAYN,WAAZ;AACAZ,MAAAA,iBAAiB,CAACY,WAAD,CAAjB;AACA;AACD;;AAEDxB,IAAAA,OAAO,CAACyB,GAAR,CAAaC,SAAD,IAAe;AACzB,UAAIA,SAAS,CAACC,IAAV,KAAmBL,KAAvB,EAA8B,OAAOE,WAAW,CAACI,IAAZ,CAAiBF,SAAjB,CAAP;AAC9B,aAAO,IAAP;AACD,KAHD;AAKAG,IAAAA,OAAO,CAACC,GAAR,CAAYN,WAAZ;AACAZ,IAAAA,iBAAiB,CAACY,WAAD,CAAjB;AACD,GApBD;;AAsBA,QAAMvB,mBAAmB,GAAI8B,KAAD,IAAW;AACrCnB,IAAAA,iBAAiB,CAACmB,KAAD,CAAjB;AACD,GAFD;;AAIA,QAAM5B,cAAc,GAAI4B,KAAD,IAAW;AAChCd,IAAAA,UAAU,CAACc,KAAD,CAAV;AACD,GAFD;;AAIA,QAAMC,SAAS,GAAG,YAAW;AAC3B,UAAMC,aAAa,GAAG,MAAMC,KAAK,CAAChD,cAAD,CAAjC;AACA,UAAMiD,UAAU,GAAG,MAAMD,KAAK,CAAC9C,WAAD,CAA9B;AACA,UAAMgD,SAAS,GAAG,MAAMH,aAAa,CAACI,IAAd,EAAxB;AACA,UAAMC,MAAM,GAAG,MAAMH,UAAU,CAACE,IAAX,EAArB;AACAxB,IAAAA,aAAa,CAACuB,SAAS,CAACG,MAAX,CAAb;AACAzB,IAAAA,UAAU,CAACwB,MAAM,CAACC,MAAR,CAAV;AACD,GAPD;;AASA,QAAMC,YAAY,GAAG,YAAW;AAC9B,UAAMC,iBAAiB,GAAG,MAAMP,KAAK,CAAC5C,aAAD,CAArC;AACA,UAAMoD,aAAa,GAAG,MAAMD,iBAAiB,CAACJ,IAAlB,EAA5B;AACAtB,IAAAA,YAAY,CAAC2B,aAAD,CAAZ;AACD,GAJD;;AAMA,QAAMC,SAAS,GAAG,YAAW;AAC3B,UAAMC,cAAc,GAAG,MAAMV,KAAK,CAAC1C,UAAD,CAAlC;AACA,UAAMqD,UAAU,GAAG,MAAMD,cAAc,CAACP,IAAf,EAAzB;AACArB,IAAAA,SAAS,CAAC6B,UAAD,CAAT;AACD,GAJD;;AAMA,QAAMC,gBAAgB,GAAG,OAAMC,IAAN,EAAYC,cAAZ,KAA+B;AACtD,QAAIC,UAAU,GAAGD,cAAc,CAACE,IAAf,CAAoB,KAApB,CAAjB;AACA,QAAIC,YAAY,GAAI,yCAAwCJ,IAAK,YAAWjE,GAAI,qGAAoGkE,cAAe,EAAnM;AACAnB,IAAAA,OAAO,CAACC,GAAR,CAAYqB,YAAZ;AACA,UAAMC,gBAAgB,GAAG,MAAMlB,KAAK,CAACiB,YAAD,CAApC;AACA,UAAME,YAAY,GAAG,MAAMD,gBAAgB,CAACf,IAAjB,EAA3B;AACA,QAAIiB,GAAG,GAAGD,YAAY,CAACE,WAAb,GAA2B,CAArC;AACA,QAAIC,GAAG,GAAGH,YAAY,CAACI,IAAvB;AACA,QAAIA,IAAI,GAAIC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiBN,GAAG,GAAGE,GAAvB,CAAX,IAA0CA,GAAtD;AACA,QAAIK,SAAS,GAAI,yCAAwCd,IAAK,YAAWjE,GAAI,uFAAsF2E,IAAK,gBAAeT,cAAe,EAAtM;AACA,UAAMc,aAAa,GAAG,MAAM5B,KAAK,CAAC2B,SAAD,CAAjC;AACA,UAAME,SAAS,GAAG,MAAMD,aAAa,CAACzB,IAAd,EAAxB;AACA,QAAI2B,KAAK,GAAGD,SAAS,CAACE,OAAV,CAAkBP,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBG,SAAS,CAACE,OAAV,CAAkBC,MAA7C,CAAlB,CAAZ;AACAhD,IAAAA,iBAAiB,CAAC8C,KAAD,CAAjB;AACAnC,IAAAA,OAAO,CAACC,GAAR,CAAYkC,KAAZ;AACD,GAfD;;AAiBA,QAAMnE,eAAe,GAAG,MAAM;AAC5B,QAAGK,OAAH,EAAY;AACV,YAAMqC,MAAM,GAAG5B,cAAc,CAACc,GAAf,CAAoBH,KAAD,IAAWA,KAAK,CAAC6C,EAApC,CAAf;AACArB,MAAAA,gBAAgB,CAAC,OAAD,EAAUP,MAAV,CAAhB;AACD;;AACDV,IAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAY5B,OAAZ;AACA2B,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAYnB,cAAZ;AACAkB,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAYzB,SAAZ;AACAwB,IAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAYxB,MAAZ;AACAc,IAAAA,OAAO,CAACQ,IAAR,CAAa,UAAb;AACD,GAdD;;AAgBA1D,EAAAA,SAAS,CAAC,MAAM;AACd8D,IAAAA,SAAS;AACTQ,IAAAA,YAAY;AACZG,IAAAA,SAAS;AACV,GAJQ,EAIN,EAJM,CAAT;AAMA,sBACE,QAAC,YAAD;AACE,IAAA,eAAe,EAAE9C,eADnB;AAEE,IAAA,gBAAgB,EAAEwB,iBAFpB;AAGE,IAAA,UAAU,EAAEtB,UAHd;AAIE,IAAA,OAAO,EAAEC,OAJX;AAKE,IAAA,mBAAmB,EAAEC,mBALvB;AAME,IAAA,OAAO,EAAEC,OANX;AAOE,IAAA,cAAc,EAAEC,cAPlB;AAAA,2BAQI;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA,8BACE,QAAC,MAAD;AAAA,gCACE,QAAC,KAAD;AAAO,UAAA,IAAI,EAAC,GAAZ;AAAgB,UAAA,SAAS,EAAE7B,IAA3B;AAAiC,UAAA,KAAK;AAAtC;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE,QAAC,aAAD;AAAe,UAAA,SAAS,EAAE+B,SAA1B;AAAqC,UAAA,MAAM,EAAEC,MAA7C;AAAA,kCACE,QAAC,KAAD;AAAO,YAAA,IAAI,EAAC,SAAZ;AAAsB,YAAA,SAAS,EAAE/B;AAAjC;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE,QAAC,KAAD;AAAO,YAAA,IAAI,EAAC,YAAZ;AAAyB,YAAA,SAAS,EAAEC;AAApC;AAAA;AAAA;AAAA;AAAA,kBAFF,eAGE,QAAC,eAAD;AAAiB,YAAA,cAAc,EAAEgC,cAAjC;AAAiD,YAAA,OAAO,EAAEC,OAA1D;AAAA,mCACE,QAAC,KAAD;AAAO,cAAA,IAAI,EAAC,UAAZ;AAAuB,cAAA,SAAS,EAAEhC;AAAlC;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,kBAHF;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAWE;AAAK,QAAA,SAAS,EAAC,MAAf;AAAA,gCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAIE;AAAK,UAAA,SAAS,EAAC,WAAf;AAA2B,UAAA,GAAG,EAAC;AAA/B;AAAA;AAAA;AAAA;AAAA,gBAJF;AAAA;AAAA;AAAA;AAAA;AAAA,cAXF;AAAA;AAAA;AAAA;AAAA;AAAA;AARJ;AAAA;AAAA;AAAA;AAAA,UADF;AA6BD,CAlID;;GAAMiC,G;UASYrC,U;;;MATZqC,G;AAoIN,eAAeA,GAAf","sourcesContent":["import './App.css';\nimport React, { useState, useEffect } from 'react';\nimport { \n  Switch,\n  Route,\n  useHistory\n} from 'react-router-dom';\nimport Home from './pages/Home';\nimport Movies from './pages/Movies';\nimport TVSeries from './pages/TVSeries';\nimport Random from './pages/Random';\n\nexport const UserContext = React.createContext();\nexport const MovieContext = React.createContext();\nexport const SuggestContext = React.createContext();\nconst key = process.env.REACT_APP_API_KEY\nconst movieGenreLink = process.env.REACT_APP_MOVIE_GENRE_URI\nconst tvGenreLink = process.env.REACT_APP_TV_GENRE_URI\nconst discoverMovie = process.env.REACT_APP_MOVIE_LIST // try moving the fetching data of movies to movie page later\nconst discoverTV = process.env.REACT_APP_TV_LIST // try moving the fetching data of movies to tv series page later\n\nconst UserProvider = (props) => {\n  const {children, generateMovieTV, addSelectedGenre, movieGenre, tvGenre, resetSelectedGenres, isMovie, setMovieOption} = props\n  return (\n    <UserContext.Provider value={{generateMovieTV, addSelectedGenre, movieGenre, tvGenre, resetSelectedGenres, isMovie, setMovieOption}}>\n      {children}\n    </UserContext.Provider>\n  )\n}\n\nconst MovieProvider = (props) => {\n  const {children, movieList, tvList} = props\n  return (\n    <MovieContext.Provider value={{movieList, tvList}}>\n      {children}\n    </MovieContext.Provider>\n  )\n}\n\nconst SuggestProvider = (props) => {\n  const {children, suggestedMovie, loading} = props\n  return (\n    <SuggestContext.Provider value={{suggestedMovie, loading}}>\n      {children}\n    </SuggestContext.Provider>\n  )\n}\n\nconst App = props => {\n  const [selectedGenres, setSelectedGenres] = useState([])\n  const [movieGenre, setMovieGenre] = useState([])\n  const [tvGenre, setTVGenre] = useState([])\n  const [movieList, setMovieList] = useState([])\n  const [tvList, settvList] = useState([])\n  const [isMovie, setIsMovie] = useState([true])\n  const [suggestedMovie, setSuggestedMovie] = useState({})\n  const [loading, setLoading] = useState(false)\n  const history = useHistory();\n\n  const addSelectedGenres = (genre) => {\n    if (selectedGenres.includes(genre)) return\n    let chosenGenre = [...selectedGenres]\n    if (isMovie) {\n      movieGenre.map((genreItem) => {\n        if (genreItem.name === genre) return chosenGenre.push(genreItem)\n        return null\n      })\n      console.log(chosenGenre)\n      setSelectedGenres(chosenGenre)\n      return\n    }\n\n    tvGenre.map((genreItem) => {\n      if (genreItem.name === genre) return chosenGenre.push(genreItem)\n      return null\n    })\n\n    console.log(chosenGenre)\n    setSelectedGenres(chosenGenre)\n  }\n\n  const resetSelectedGenres = (value) => {\n    setSelectedGenres(value)\n  }\n\n  const setMovieOption = (value) => {\n    setIsMovie(value)\n  }\n\n  const getGenres = async() => {\n    const movieResponse = await fetch(movieGenreLink)\n    const tvResponse = await fetch(tvGenreLink)\n    const jsonMovie = await movieResponse.json()\n    const jsonTV = await tvResponse.json()\n    setMovieGenre(jsonMovie.genres)\n    setTVGenre(jsonTV.genres)\n  }\n\n  const getMovieList = async() => {\n    const movieListResponse = await fetch(discoverMovie)\n    const jsonMovieList = await movieListResponse.json()\n    setMovieList(jsonMovieList) \n  }\n  \n  const getTVList = async() => {\n    const TVListResponse = await fetch(discoverTV)\n    const jsonTVList = await TVListResponse.json()\n    settvList(jsonTVList) \n  }\n\n  const makeDiscoverLink = async(type, includedGenres) => {\n    let linkGenres = includedGenres.join('%2C')\n    let discoverLink = `https://api.themoviedb.org/3/discover/${type}?api_key=${key}&language=en-US&sort_by=popularity.desc&include_adult=true&include_video=false&page=1&with_genres=${includedGenres}`\n    console.log(discoverLink)\n    const discoverResponse = await fetch(discoverLink)\n    const discoverJson = await discoverResponse.json()\n    let max = discoverJson.total_pages + 1\n    let min = discoverJson.page\n    let page = (Math.floor(Math.random() * (max - min)) + min)\n    let finalLink = `https://api.themoviedb.org/3/discover/${type}?api_key=${key}&language=en-US&sort_by=popularity.desc&include_adult=true&include_video=false&page=${page}&with_genres=${includedGenres}`\n    const finalResponse = await fetch(finalLink)\n    const finalJson = await finalResponse.json()\n    let movie = finalJson.results[Math.floor(Math.random() * finalJson.results.length)]\n    setSuggestedMovie(movie)\n    console.log(movie)\n  }\n\n  const generateMovieTV = () => {\n    if(isMovie) {\n      const genres = selectedGenres.map((genre) => genre.id)\n      makeDiscoverLink('movie', genres)\n    }\n    console.log('IsMovie')\n    console.log(isMovie)\n    console.log('Selected genre')\n    console.log(selectedGenres)\n    console.log('movieList')\n    console.log(movieList)\n    console.log('tvList')\n    console.log(tvList)\n    history.push('/suggest')\n  }\n\n  useEffect(() => {\n    getGenres()\n    getMovieList()\n    getTVList()\n  }, [])\n  \n  return (\n    <UserProvider \n      generateMovieTV={generateMovieTV} \n      addSelectedGenre={addSelectedGenres} \n      movieGenre={movieGenre} \n      tvGenre={tvGenre} \n      resetSelectedGenres={resetSelectedGenres}\n      isMovie={isMovie}\n      setMovieOption={setMovieOption}>\n        <div className='App'>\n          <Switch>\n            <Route path=\"/\" component={Home} exact/>\n            <MovieProvider movieList={movieList} tvList={tvList}>\n              <Route path=\"/movies\" component={Movies}/>\n              <Route path=\"/tv-series\" component={TVSeries}/>\n              <SuggestProvider suggestedMovie={suggestedMovie} loading={loading}>\n                <Route path=\"/suggest\" component={Random} />\n              </SuggestProvider>\n            </MovieProvider>\n          </Switch>\n          <div className='TMDb'>\n            <div>\n              This product uses the TMDB API but is not endorsed or certified by TMDB\n            </div>\n            <img className='TMDB-logo' src='https://www.themoviedb.org/assets/2/v4/logos/v2/blue_short-8e7b30f73a4020692ccca9c88bafe5dcb6f8a62a4c6bc55cd9ba82bb2cd95f6c.svg'/>\n          </div>\n        </div>\n    </UserProvider>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}