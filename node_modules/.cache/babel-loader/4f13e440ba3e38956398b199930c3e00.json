{"ast":null,"code":"var _jsxFileName = \"/home/mcbmanalo/React_Personal_Project/movie-suggestion/src/modules/Generator.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useState, useEffect } from 'react';\nimport { UserContext } from '../App';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Generator = () => {\n  _s();\n\n  const user = useContext(UserContext);\n  const {\n    selectedGenres\n  } = user;\n  const [isSelectedGenreEmpty, setIsSelectedGenre] = useState(true);\n\n  const setSelectedGenres = () => {\n    const userSelectedGenres = user.selectedGenres.map(genre => genre.name);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"selectedGenres\",\n      children: [\"Selected Genres: \", userSelectedGenres.join(', ')]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 7\n    }, this);\n  };\n\n  const checkSelectedGenre = () => {\n    if (user.selectedGenres.length > 0) return setIsSelectedGenre(false);\n    return setIsSelectedGenre(true);\n  };\n\n  useEffect(() => {\n    checkSelectedGenre();\n  }, [user.selectedGenres]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App-generator\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"quotes\",\n      onClick: user.generateMovieTV,\n      children: [\"Surprise yourself!\", isSelectedGenreEmpty ? /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 33\n      }, this) : setSelectedGenres(), user.isMaxGenre ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error\",\n        children: \"Reached max number of allowable genres. (max 3)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 29\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Generator, \"n6WmviYMuPwjQppRh0wekh66QvA=\");\n\n_c = Generator;\nexport default Generator;\n\nvar _c;\n\n$RefreshReg$(_c, \"Generator\");","map":{"version":3,"sources":["/home/mcbmanalo/React_Personal_Project/movie-suggestion/src/modules/Generator.js"],"names":["React","useContext","useState","useEffect","UserContext","Generator","user","selectedGenres","isSelectedGenreEmpty","setIsSelectedGenre","setSelectedGenres","userSelectedGenres","map","genre","name","join","checkSelectedGenre","length","generateMovieTV","isMaxGenre"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,UAAf,EAA2BC,QAA3B,EAAqCC,SAArC,QAAqD,OAArD;AACA,SAASC,WAAT,QAA4B,QAA5B;;;AAEA,MAAMC,SAAS,GAAG,MAAM;AAAA;;AACtB,QAAMC,IAAI,GAAGL,UAAU,CAACG,WAAD,CAAvB;AACA,QAAM;AAACG,IAAAA;AAAD,MAAqBD,IAA3B;AACA,QAAM,CAACE,oBAAD,EAAuBC,kBAAvB,IAA6CP,QAAQ,CAAC,IAAD,CAA3D;;AAEA,QAAMQ,iBAAiB,GAAG,MAAM;AAC9B,UAAMC,kBAAkB,GAAGL,IAAI,CAACC,cAAL,CAAoBK,GAApB,CAAwBC,KAAK,IAAIA,KAAK,CAACC,IAAvC,CAA3B;AACA,wBACE;AAAK,MAAA,SAAS,EAAC,gBAAf;AAAA,sCAAkDH,kBAAkB,CAACI,IAAnB,CAAwB,IAAxB,CAAlD;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAGD,GALD;;AAOA,QAAMC,kBAAkB,GAAG,MAAM;AAC/B,QAAIV,IAAI,CAACC,cAAL,CAAoBU,MAApB,GAA6B,CAAjC,EAAoC,OAAOR,kBAAkB,CAAC,KAAD,CAAzB;AACpC,WAAOA,kBAAkB,CAAC,IAAD,CAAzB;AACD,GAHD;;AAKAN,EAAAA,SAAS,CAAC,MAAM;AACda,IAAAA,kBAAkB;AACnB,GAFQ,EAEN,CAACV,IAAI,CAACC,cAAN,CAFM,CAAT;AAIA,sBACE;AAAK,IAAA,SAAS,EAAC,eAAf;AAAA,2BACE;AAAK,MAAA,SAAS,EAAC,QAAf;AAAwB,MAAA,OAAO,EAAED,IAAI,CAACY,eAAtC;AAAA,uCAEGV,oBAAoB,gBAAG;AAAA;AAAA;AAAA;AAAA,cAAH,GAAiBE,iBAAiB,EAFzD,EAGIJ,IAAI,CAACa,UAAL,gBAAkB;AAAK,QAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAlB,gBACA;AAAA;AAAA;AAAA;AAAA,cAJJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAWD,CAhCD;;GAAMd,S;;KAAAA,S;AAkCN,eAAeA,SAAf","sourcesContent":["import React, {useContext, useState, useEffect} from 'react';\nimport { UserContext } from '../App'\n\nconst Generator = () => {\n  const user = useContext(UserContext);\n  const {selectedGenres, } = user\n  const [isSelectedGenreEmpty, setIsSelectedGenre] = useState(true)\n\n  const setSelectedGenres = () => {\n    const userSelectedGenres = user.selectedGenres.map(genre => genre.name)\n    return (\n      <div className='selectedGenres'>Selected Genres: {userSelectedGenres.join(', ')}</div>\n    )\n  }\n\n  const checkSelectedGenre = () => {\n    if (user.selectedGenres.length > 0) return setIsSelectedGenre(false)\n    return setIsSelectedGenre(true)\n  }\n\n  useEffect(() => {\n    checkSelectedGenre()\n  }, [user.selectedGenres])\n\n  return (\n    <div className='App-generator'>\n      <div className='quotes' onClick={user.generateMovieTV}>\n        Surprise yourself!\n        {isSelectedGenreEmpty ? <div></div> : setSelectedGenres()}\n        { user.isMaxGenre ? <div className='error'>Reached max number of allowable genres. (max 3)</div> :\n          <div></div>\n        }\n      </div>\n    </div>\n  )\n}\n\nexport default Generator;"]},"metadata":{},"sourceType":"module"}