{"ast":null,"code":"var _jsxFileName = \"/home/mcbmanalo/React_Personal_Project/movie-suggestion/src/pages/Movies.js\",\n    _s = $RefreshSig$();\n\nimport Header from \"../modules/Header\";\nimport React, { useState, useContext, useEffect } from 'react';\nimport { MovieContext, UserContext } from \"../App\";\nimport Pagination from \"../modules/Pagination\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst imagepath = process.env.REACT_APP_POSTER_PATH;\nconst discoverMovie = process.env.REACT_APP_MOVIE_LIST;\nconst key = process.env.REACT_APP_API_KEY;\n\nconst Movies = () => {\n  _s();\n\n  // Trying to re-create problem\n  const [currentPage, setCurrentPage] = useState(0); // this will be used for pagination later\n\n  const [movieList, setNewMovieList] = useState([]);\n  const movies = useContext(MovieContext);\n  const user = useContext(UserContext);\n  const {\n    movieGenre: genres\n  } = user; // const {movieList, setNewMovieList} = movies\n\n  const getMovieList = async () => {\n    const movieListResponse = await fetch(discoverMovie);\n    const jsonMovieList = await movieListResponse.json();\n    console.log(jsonMovieList);\n    setNewMovieList(jsonMovieList);\n  };\n\n  const getGenres = genreIDs => {\n    let movieGenre = [];\n    genres.map(genre => {\n      if (genreIDs.includes(genre.id)) movieGenre.push(genre.name);\n    });\n    return movieGenre.join(', ');\n  };\n\n  const setPagination = pageNumber => {\n    setCurrentPage(pageNumber);\n    generateNewMoviesPage(pageNumber);\n  };\n\n  const generateNewMoviesPage = async page => {\n    let discoverMovieLink = `https://api.themoviedb.org/3/discover/movie?api_key=${key}&language=en-US&sort_by=popularity.desc&page=${page}`;\n    const newMovieList = await fetch(discoverMovieLink);\n    const newMovieListResult = await newMovieList.json();\n    setNewMovieList(newMovieListResult);\n  };\n\n  const generateMovies = movieList.results.map(movie => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"movie\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        className: \"image\",\n        alt: movie.title,\n        src: imagepath + movie.poster_path\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"movieContent\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: movie.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: getGenres(movie.genre_ids)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"Release Date: \", movie.release_date]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: movie.overview\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this)]\n    }, movie.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this);\n  });\n  useEffect(() => {\n    getMovieList();\n    setCurrentPage(movieList.page);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: generateMovies\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Pagination, {\n      currentPage: currentPage,\n      setCurrentPage: setPagination,\n      lastPage: movieList.total_pages\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Movies, \"SpdmRcqjPFd99Sk5dSJsuTE+N5o=\");\n\n_c = Movies;\nexport default Movies;\n\nvar _c;\n\n$RefreshReg$(_c, \"Movies\");","map":{"version":3,"sources":["/home/mcbmanalo/React_Personal_Project/movie-suggestion/src/pages/Movies.js"],"names":["Header","React","useState","useContext","useEffect","MovieContext","UserContext","Pagination","imagepath","process","env","REACT_APP_POSTER_PATH","discoverMovie","REACT_APP_MOVIE_LIST","key","REACT_APP_API_KEY","Movies","currentPage","setCurrentPage","movieList","setNewMovieList","movies","user","movieGenre","genres","getMovieList","movieListResponse","fetch","jsonMovieList","json","console","log","getGenres","genreIDs","map","genre","includes","id","push","name","join","setPagination","pageNumber","generateNewMoviesPage","page","discoverMovieLink","newMovieList","newMovieListResult","generateMovies","results","movie","title","poster_path","genre_ids","release_date","overview","total_pages"],"mappings":"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","sourcesContent":["import Header from \"../modules/Header\";\nimport React, {useState, useContext, useEffect} from 'react';\nimport { MovieContext, UserContext } from \"../App\";\nimport Pagination from \"../modules/Pagination\";\n\nconst imagepath = process.env.REACT_APP_POSTER_PATH\nconst discoverMovie = process.env.REACT_APP_MOVIE_LIST\nconst key = process.env.REACT_APP_API_KEY\n\nconst Movies = () => {\n  // Trying to re-create problem\n  const [currentPage, setCurrentPage] = useState(0) // this will be used for pagination later\n  const [movieList, setNewMovieList] = useState([])\n\n  const movies = useContext(MovieContext);\n  const user = useContext(UserContext);\n  const {movieGenre: genres} = user;\n  // const {movieList, setNewMovieList} = movies\n\n  const getMovieList = async() => {\n    const movieListResponse = await fetch(discoverMovie)\n    const jsonMovieList = await movieListResponse.json()\n    console.log(jsonMovieList)\n    setNewMovieList(jsonMovieList) \n  }\n\n  const getGenres = (genreIDs) => {\n    let movieGenre = []\n    genres.map((genre) => {\n      if (genreIDs.includes(genre.id)) movieGenre.push(genre.name)\n    })\n    return movieGenre.join(', ')\n  }\n\n  const setPagination = (pageNumber) => {\n    setCurrentPage(pageNumber)\n    generateNewMoviesPage(pageNumber)\n  }\n\n  const generateNewMoviesPage = async(page) => {\n    let discoverMovieLink = `https://api.themoviedb.org/3/discover/movie?api_key=${key}&language=en-US&sort_by=popularity.desc&page=${page}`\n    const newMovieList = await fetch(discoverMovieLink)\n    const newMovieListResult = await newMovieList.json()\n    setNewMovieList(newMovieListResult)\n  }\n\n  const generateMovies = movieList.results.map((movie) => {\n    return (\n      <div key={movie.id} className='movie'>\n        <img className='image' alt={movie.title} src={imagepath + movie.poster_path}/>\n        <div className='movieContent'>\n          <div>{movie.title}</div> \n          <div>{getGenres(movie.genre_ids)}</div>\n          <div>Release Date: {movie.release_date}</div>\n          <div>{movie.overview}</div>\n        </div>\n      </div>\n    )\n  })\n\n  useEffect(() => {\n    getMovieList()\n    setCurrentPage(movieList.page)\n  }, [])\n\n  return (\n    <div>\n      <Header/>\n      <div>\n        {generateMovies}\n      </div>\n      <Pagination currentPage={currentPage} setCurrentPage={setPagination} lastPage={movieList.total_pages}/>\n    </div>\n  )\n}\n\nexport default Movies;"]},"metadata":{},"sourceType":"module"}