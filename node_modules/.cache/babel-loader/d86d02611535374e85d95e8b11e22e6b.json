{"ast":null,"code":"var _jsxFileName = \"/home/mcbmanalo/React_Personal_Project/movie-suggestion/src/pages/TVSeries.js\",\n    _s = $RefreshSig$();\n\nimport Header from \"../modules/Header\";\nimport React, { useState, useContext, useEffect } from 'react';\nimport { MovieContext, UserContext } from \"../App\";\nimport Pagination from \"../modules/Pagination\";\nimport Loading from \"../modules/Loading\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst imagepath = process.env.REACT_APP_POSTER_PATH;\nconst discoverTV = process.env.REACT_APP_TV_LIST;\nconst key = process.env.REACT_APP_API_KEY;\n\nconst TVSeries = () => {\n  _s();\n\n  const [tvList, setNewTVList] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [currentPage, setCurrentPage] = useState(1); // this will be used for pagination later\n\n  const [lastPage, setLastPage] = useState(1);\n  const user = useContext(UserContext);\n  const {\n    tvGenre: genres\n  } = user;\n\n  const getTVList = async () => {\n    const tvListResponse = await fetch(discoverTV);\n    const jsonTVList = await tvListResponse.json();\n    setNewTVList(jsonTVList.results);\n    setCurrentPage(jsonTVList.page);\n    setLastPage(jsonTVList.total_pages);\n    setLoading(false);\n  };\n\n  const getGenres = genreIDs => {\n    let movieGenre = [];\n    genres.map(genre => {\n      if (genreIDs.includes(genre.id)) movieGenre.push(genre.name);\n    });\n    return movieGenre.join(', ');\n  };\n\n  const setPagination = pageNumber => {\n    setLoading(true);\n    setCurrentPage(pageNumber);\n    generateNewTVPage(pageNumber);\n  };\n\n  const generateNewTVPage = async page => {\n    let discoverTVLink = `https://api.themoviedb.org/3/discover/tv?api_key=${key}&language=en-US&sort_by=popularity.desc&page=${page}`;\n    const newTVList = await fetch(discoverTVLink);\n    const newTVListResult = await newTVList.json();\n    setNewTVList(newTVListResult.results);\n    setLoading(false);\n  };\n\n  const generateTVShows = () => {\n    if (tvList.length > 0) {\n      return tvList.map(series => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"movie\",\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            className: \"image\",\n            alt: series.name,\n            src: imagepath + series.poster_path\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"movieContent\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              children: series.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 58,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: getGenres(series.genre_ids)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 59,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [\"First Air Date: \", series.first_air_date]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 60,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: series.overview\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 61,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 15\n          }, this)]\n        }, series.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 13\n        }, this);\n      });\n    }\n  };\n\n  useEffect(() => {\n    setLoading(true);\n    getTVList();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), loading ? /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: generateTVShows()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Pagination, {\n        currentPage: currentPage,\n        setCurrentPage: setPagination,\n        lastPage: lastPage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n};\n\n_s(TVSeries, \"CdISLCEReMvG/nMNb9YZHbKKf/g=\");\n\n_c = TVSeries;\nexport default TVSeries;\n\nvar _c;\n\n$RefreshReg$(_c, \"TVSeries\");","map":{"version":3,"sources":["/home/mcbmanalo/React_Personal_Project/movie-suggestion/src/pages/TVSeries.js"],"names":["Header","React","useState","useContext","useEffect","MovieContext","UserContext","Pagination","Loading","imagepath","process","env","REACT_APP_POSTER_PATH","discoverTV","REACT_APP_TV_LIST","key","REACT_APP_API_KEY","TVSeries","tvList","setNewTVList","loading","setLoading","currentPage","setCurrentPage","lastPage","setLastPage","user","tvGenre","genres","getTVList","tvListResponse","fetch","jsonTVList","json","results","page","total_pages","getGenres","genreIDs","movieGenre","map","genre","includes","id","push","name","join","setPagination","pageNumber","generateNewTVPage","discoverTVLink","newTVList","newTVListResult","generateTVShows","length","series","poster_path","genre_ids","first_air_date","overview"],"mappings":"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","sourcesContent":["import Header from \"../modules/Header\";\nimport React, {useState, useContext, useEffect} from 'react';\nimport { MovieContext, UserContext } from \"../App\";\nimport Pagination from \"../modules/Pagination\";\nimport Loading from \"../modules/Loading\";\n\nconst imagepath = process.env.REACT_APP_POSTER_PATH\nconst discoverTV = process.env.REACT_APP_TV_LIST \nconst key = process.env.REACT_APP_API_KEY\n\nconst TVSeries = () => {\n  const [tvList, setNewTVList] = useState([])\n  const [loading, setLoading] = useState(false)\n  const [currentPage, setCurrentPage] = useState(1) // this will be used for pagination later\n  const [lastPage, setLastPage] = useState(1)\n  const user = useContext(UserContext);\n  const {tvGenre:genres} = user;\n\n  const getTVList = async() => {\n    const tvListResponse = await fetch(discoverTV)\n    const jsonTVList = await tvListResponse.json()\n    setNewTVList(jsonTVList.results)\n    setCurrentPage(jsonTVList.page)\n    setLastPage(jsonTVList.total_pages)\n    setLoading(false)\n  }\n\n  const getGenres = (genreIDs) => {\n    let movieGenre = []\n    genres.map((genre) => {\n      if (genreIDs.includes(genre.id)) movieGenre.push(genre.name)\n    })\n    return movieGenre.join(', ')\n  }\n\n  const setPagination = (pageNumber) => {\n    setLoading(true)\n    setCurrentPage(pageNumber)\n    generateNewTVPage(pageNumber)\n  }\n\n  const generateNewTVPage = async(page) => {\n    let discoverTVLink = `https://api.themoviedb.org/3/discover/tv?api_key=${key}&language=en-US&sort_by=popularity.desc&page=${page}`\n    const newTVList = await fetch(discoverTVLink)\n    const newTVListResult = await newTVList.json()\n    setNewTVList(newTVListResult.results)\n    setLoading(false)\n  }\n\n  const generateTVShows = () => {\n    if (tvList.length > 0) {\n      return (\n        tvList.map((series) => {\n          return (\n            <div key={series.id} className='movie'>\n              <img className='image' alt={series.name} src={imagepath + series.poster_path}/>\n              <div className='movieContent'>\n                <div>{series.name}</div> \n                <div>{getGenres(series.genre_ids)}</div>\n                <div>First Air Date: {series.first_air_date}</div>\n                <div>{series.overview}</div>\n              </div>\n            </div>\n          )\n        })\n      )\n    }\n  }\n\n  useEffect(() => {\n    setLoading(true)\n    getTVList()\n  }, [])\n\n  return (\n    <div className='App'>\n      <Header />\n      {\n        loading ? \n        <Loading/> :\n        <div>\n          <div>\n            {generateTVShows()}\n          </div>\n          <Pagination currentPage={currentPage} setCurrentPage={setPagination} lastPage={lastPage}/>\n        </div>\n      }\n    </div>\n  )\n}\n\nexport default TVSeries;"]},"metadata":{},"sourceType":"module"}