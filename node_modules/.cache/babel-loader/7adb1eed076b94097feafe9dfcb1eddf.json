{"ast":null,"code":"var _jsxFileName = \"/home/mcbmanalo/React_Personal_Project/movie-suggestion/src/App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport React, { useState, useEffect } from 'react';\nimport { BrowserRouter as Router, Switch, Route, useHistory } from 'react-router-dom';\nimport Home from './pages/Home';\nimport Movies from './pages/Movies';\nimport TVSeries from './pages/TVSeries';\nimport Random from './pages/Random';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const UserContext = /*#__PURE__*/React.createContext();\nexport const MovieContext = /*#__PURE__*/React.createContext(); // const key = process.env.REACT_APP_API_KEY\n\nconst movieGenreLink = process.env.REACT_APP_MOVIE_GENRE_URI;\nconst tvGenreLink = process.env.REACT_APP_TV_GENRE_URI;\nconst discoverMovie = process.env.REACT_APP_MOVIE_LIST; // try moving the fetching data of movies to movie page later\n\nconst discoverTV = process.env.REACT_APP_TV_LIST; // try moving the fetching data of movies to tv series page later\n\nconst UserProvider = props => {\n  const {\n    children,\n    generateMovieTV,\n    addSelectedGenre,\n    genres\n  } = props;\n  return /*#__PURE__*/_jsxDEV(UserContext.Provider, {\n    value: {\n      generateMovieTV,\n      addSelectedGenre,\n      genres\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 5\n  }, this);\n};\n\n_c = UserProvider;\n\nconst MovieProvider = props => {\n  const {\n    children,\n    movieList,\n    tvList\n  } = props;\n  return /*#__PURE__*/_jsxDEV(MovieContext.Provider, {\n    value: {\n      movieList,\n      tvList\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n};\n\n_c2 = MovieProvider;\n\nconst getUniqueList = (list, key) => {\n  return [...new Map(list.map(item => [item[key], item])).values()];\n};\n\nconst testGenre = (list1, list2) => {\n  let newList = [...list1];\n  list2.map(item => {\n    newList.push(list1.find(list1Item => list1Item.id === item.id));\n  });\n  console.log('Test Log');\n  console.log(newList);\n};\n\nfunction App() {\n  _s();\n\n  const [selectedGenres, setSelectedGenres] = useState([]);\n  const [genres, setListofGenres] = useState([]);\n  const [movieList, setMovieList] = useState([]);\n  const [tvList, settvList] = useState([]);\n  const history = useHistory();\n\n  const addSelectedGenres = genre => {\n    if (selectedGenres.includes(genre)) return;\n    let chosenGenre = [...selectedGenres];\n    genres.map(genreItem => {\n      if (genreItem.name === genre) return chosenGenre.push(genreItem);\n      return null;\n    });\n    console.log(chosenGenre);\n    setSelectedGenres(chosenGenre);\n  };\n\n  const getGenres = async () => {\n    const movieResponse = await fetch(movieGenreLink);\n    const tvResponse = await fetch(tvGenreLink);\n    const jsonMovie = await movieResponse.json();\n    const jsonTV = await tvResponse.json();\n    const listOfGenres = [...jsonMovie.genres, ...jsonTV.genres];\n    testGenre(jsonMovie.genres, jsonTV.genres);\n    setListofGenres(getUniqueList(listOfGenres, 'id'));\n  };\n\n  const getMovieList = async () => {\n    const movieListResponse = await fetch(discoverMovie);\n    const jsonMovieList = await movieListResponse.json();\n    setMovieList(jsonMovieList);\n  };\n\n  const getTVList = async () => {\n    const TVListResponse = await fetch(discoverTV);\n    const jsonTVList = await TVListResponse.json();\n    settvList(jsonTVList);\n  };\n\n  const generateMovieTV = () => {\n    console.log('Add code for choosing random movie');\n    history.push('/suggest');\n  };\n\n  useEffect(() => {\n    getGenres();\n    getMovieList();\n    getTVList();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(UserProvider, {\n    generateMovieTV: generateMovieTV,\n    addSelectedGenre: addSelectedGenres,\n    genres: genres,\n    children: /*#__PURE__*/_jsxDEV(Router, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"App\",\n        children: [/*#__PURE__*/_jsxDEV(Switch, {\n          children: [/*#__PURE__*/_jsxDEV(Route, {\n            path: \"/\",\n            component: Home,\n            exact: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(MovieProvider, {\n            movieList: movieList,\n            tvList: tvList,\n            children: [/*#__PURE__*/_jsxDEV(Route, {\n              path: \"/movies\",\n              component: Movies\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 111,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Route, {\n              path: \"/tv-series\",\n              component: TVSeries\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 112,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Route, {\n              path: \"/suggest\",\n              component: Random\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 113,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"TMDb\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: \"This product uses the TMDB API but is not endorsed or certified by TMDB\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n            className: \"TMDB-logo\",\n            src: \"https://www.themoviedb.org/assets/2/v4/logos/v2/blue_short-8e7b30f73a4020692ccca9c88bafe5dcb6f8a62a4c6bc55cd9ba82bb2cd95f6c.svg\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"hAFtIzZASZ+5RQx/El/Iky17AR8=\", false, function () {\n  return [useHistory];\n});\n\n_c3 = App;\nexport default App;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"UserProvider\");\n$RefreshReg$(_c2, \"MovieProvider\");\n$RefreshReg$(_c3, \"App\");","map":{"version":3,"sources":["/home/mcbmanalo/React_Personal_Project/movie-suggestion/src/App.js"],"names":["React","useState","useEffect","BrowserRouter","Router","Switch","Route","useHistory","Home","Movies","TVSeries","Random","UserContext","createContext","MovieContext","movieGenreLink","process","env","REACT_APP_MOVIE_GENRE_URI","tvGenreLink","REACT_APP_TV_GENRE_URI","discoverMovie","REACT_APP_MOVIE_LIST","discoverTV","REACT_APP_TV_LIST","UserProvider","props","children","generateMovieTV","addSelectedGenre","genres","MovieProvider","movieList","tvList","getUniqueList","list","key","Map","map","item","values","testGenre","list1","list2","newList","push","find","list1Item","id","console","log","App","selectedGenres","setSelectedGenres","setListofGenres","setMovieList","settvList","history","addSelectedGenres","genre","includes","chosenGenre","genreItem","name","getGenres","movieResponse","fetch","tvResponse","jsonMovie","json","jsonTV","listOfGenres","getMovieList","movieListResponse","jsonMovieList","getTVList","TVListResponse","jsonTVList"],"mappings":"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","sourcesContent":["import './App.css';\nimport React, { useState, useEffect } from 'react';\nimport { \n  BrowserRouter as Router,\n  Switch,\n  Route,\n  useHistory\n} from 'react-router-dom';\nimport Home from './pages/Home';\nimport Movies from './pages/Movies';\nimport TVSeries from './pages/TVSeries';\nimport Random from './pages/Random';\n\nexport const UserContext = React.createContext();\nexport const MovieContext = React.createContext();\n// const key = process.env.REACT_APP_API_KEY\nconst movieGenreLink = process.env.REACT_APP_MOVIE_GENRE_URI\nconst tvGenreLink = process.env.REACT_APP_TV_GENRE_URI\nconst discoverMovie = process.env.REACT_APP_MOVIE_LIST // try moving the fetching data of movies to movie page later\nconst discoverTV = process.env.REACT_APP_TV_LIST // try moving the fetching data of movies to tv series page later\n\nconst UserProvider = (props) => {\n  const {children, generateMovieTV, addSelectedGenre, genres} = props\n  return (\n    <UserContext.Provider value={{generateMovieTV, addSelectedGenre, genres}}>\n      {children}\n    </UserContext.Provider>\n  )\n}\n\nconst MovieProvider = (props) => {\n  const {children, movieList, tvList} = props\n  return (\n    <MovieContext.Provider value={{movieList, tvList}}>\n      {children}\n    </MovieContext.Provider>\n  )\n}\n\nconst getUniqueList = (list, key) => {\n  return [...new Map(list.map(item => [item[key], item])).values()]\n}\n\nconst testGenre = (list1, list2) => {\n  let newList = [...list1]\n  list2.map((item) => {\n    newList.push(list1.find(list1Item => list1Item.id === item.id))\n  })\n  console.log('Test Log')\n  console.log(newList)\n}\n\nfunction App() {\n  const [selectedGenres, setSelectedGenres] = useState([])\n  const [genres, setListofGenres] = useState([])\n  const [movieList, setMovieList] = useState([])\n  const [tvList, settvList] = useState([])\nconst history = useHistory()\n\n\n  const addSelectedGenres = (genre) => {\n    if (selectedGenres.includes(genre)) return\n    let chosenGenre = [...selectedGenres]\n    genres.map((genreItem) => {\n      if (genreItem.name === genre) return chosenGenre.push(genreItem)\n      return null\n    })\n    console.log(chosenGenre)\n    setSelectedGenres(chosenGenre)\n  }\n\n  const getGenres = async() => {\n    const movieResponse = await fetch(movieGenreLink)\n    const tvResponse = await fetch(tvGenreLink)\n    const jsonMovie = await movieResponse.json()\n    const jsonTV = await tvResponse.json()\n    const listOfGenres = [...jsonMovie.genres, ...jsonTV.genres]\n    testGenre(jsonMovie.genres, jsonTV.genres)\n    setListofGenres(getUniqueList(listOfGenres, 'id'))\n  }\n\n  const getMovieList = async() => {\n    const movieListResponse = await fetch(discoverMovie)\n    const jsonMovieList = await movieListResponse.json()\n    setMovieList(jsonMovieList) \n  }\n  \n  const getTVList = async() => {\n    const TVListResponse = await fetch(discoverTV)\n    const jsonTVList = await TVListResponse.json()\n    settvList(jsonTVList) \n  }\n\n  const generateMovieTV = () => {\n    console.log('Add code for choosing random movie')\n    history.push('/suggest')\n  }\n\n  useEffect(() => {\n    getGenres()\n    getMovieList()\n    getTVList()\n  }, [])\n  return (\n    <UserProvider generateMovieTV={generateMovieTV} addSelectedGenre={addSelectedGenres} genres={genres}>\n      <Router>\n        <div className='App'>\n          <Switch>\n            <Route path=\"/\" component={Home} exact/>\n            <MovieProvider movieList={movieList} tvList={tvList}>\n              <Route path=\"/movies\" component={Movies}/>\n              <Route path=\"/tv-series\" component={TVSeries}/>\n              <Route path=\"/suggest\" component={Random} />\n            </MovieProvider>\n          </Switch>\n          <div className='TMDb'>\n            <div>\n              This product uses the TMDB API but is not endorsed or certified by TMDB\n            </div>\n            <img className='TMDB-logo' src='https://www.themoviedb.org/assets/2/v4/logos/v2/blue_short-8e7b30f73a4020692ccca9c88bafe5dcb6f8a62a4c6bc55cd9ba82bb2cd95f6c.svg'/>\n          </div>\n        </div>\n      </Router>\n    </UserProvider>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}