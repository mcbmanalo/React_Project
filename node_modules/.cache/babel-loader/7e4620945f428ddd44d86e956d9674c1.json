{"ast":null,"code":"var _jsxFileName = \"/home/mcbmanalo/React_Personal_Project/movie-suggestion/src/App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport React, { useState, useEffect } from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport Home from './pages/Home';\nimport Movies from './pages/Movies';\nimport TVSeries from './pages/TVSeries';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const UserContext = /*#__PURE__*/React.createContext();\nconst key = process.env.REACT_APP_API_KEY;\nconst movieGenreLink = `https://api.themoviedb.org/3/genre/movie/list?api_key=${key}&language=en-US`;\nconst tvGenreLink = `https://api.themoviedb.org/3/genre/tv/list?api_key=${key}&language=en-US`;\n\nconst UserProvider = props => {\n  const {\n    children,\n    generateMovieTV,\n    addSelectedGenre,\n    genres\n  } = props;\n  return /*#__PURE__*/_jsxDEV(UserContext.Provider, {\n    value: {\n      generateMovieTV,\n      addSelectedGenre,\n      genres\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 5\n  }, this);\n};\n\n_c = UserProvider;\n\nconst getUniqueList = (list, key) => {\n  return [...new Map(list.map(item => [item[key], item])).values()];\n};\n\nfunction App() {\n  _s();\n\n  const [selectedGenres, setSelectedGenres] = useState([]);\n  const [genres, setListofGenres] = useState([]);\n\n  const addSelectedGenres = genre => {\n    if (selectedGenres.includes(genre)) return;\n    let chosenGenre = [];\n    genres.map(genreItem => {\n      if (genreItem.name == genre) chosenGenre.push(genreItem);\n    });\n    console.log(chosenGenre);\n    let newSelectedGenres = [...selectedGenres];\n    newSelectedGenres.push(genre);\n    console.log(newSelectedGenres);\n    setSelectedGenres(newSelectedGenres);\n  };\n\n  const getGenres = async () => {\n    const movieResponse = await fetch(movieGenreLink);\n    const tvResponse = await fetch(tvGenreLink);\n    const jsonMovie = await movieResponse.json();\n    const jsonTV = await tvResponse.json();\n    const listOfGenres = [...jsonMovie.genres, ...jsonTV.genres];\n    setListofGenres(getUniqueList(listOfGenres, 'id'));\n  };\n\n  const generateMovieTV = () => {\n    console.log('Add code for choosing random movie');\n  };\n\n  useEffect(() => {\n    getGenres();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(UserProvider, {\n    generateMovieTV: generateMovieTV,\n    addSelectedGenre: addSelectedGenres,\n    genres: genres,\n    children: /*#__PURE__*/_jsxDEV(Router, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"App\",\n        children: /*#__PURE__*/_jsxDEV(Switch, {\n          children: [/*#__PURE__*/_jsxDEV(Route, {\n            path: \"/\",\n            component: Home,\n            exact: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Route, {\n            path: \"/movies\",\n            component: Movies\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Route, {\n            path: \"/tv-series\",\n            component: TVSeries\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"8PVpeqcbn0bGcle+IifoqzlQoIE=\");\n\n_c2 = App;\nexport default App;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"UserProvider\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"sources":["/home/mcbmanalo/React_Personal_Project/movie-suggestion/src/App.js"],"names":["React","useState","useEffect","BrowserRouter","Router","Switch","Route","Home","Movies","TVSeries","UserContext","createContext","key","process","env","REACT_APP_API_KEY","movieGenreLink","tvGenreLink","UserProvider","props","children","generateMovieTV","addSelectedGenre","genres","getUniqueList","list","Map","map","item","values","App","selectedGenres","setSelectedGenres","setListofGenres","addSelectedGenres","genre","includes","chosenGenre","genreItem","name","push","console","log","newSelectedGenres","getGenres","movieResponse","fetch","tvResponse","jsonMovie","json","jsonTV","listOfGenres"],"mappings":"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","sourcesContent":["import './App.css';\nimport React, { useState, useEffect } from 'react';\nimport { \n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from 'react-router-dom';\nimport Home from './pages/Home';\nimport Movies from './pages/Movies';\nimport TVSeries from './pages/TVSeries';\n\nexport const UserContext = React.createContext();\nconst key = process.env.REACT_APP_API_KEY\nconst movieGenreLink = `https://api.themoviedb.org/3/genre/movie/list?api_key=${key}&language=en-US`\nconst tvGenreLink = `https://api.themoviedb.org/3/genre/tv/list?api_key=${key}&language=en-US`\n\nconst UserProvider = (props) => {\n  const {children, generateMovieTV, addSelectedGenre, genres} = props\n  return (\n    <UserContext.Provider value={{generateMovieTV, addSelectedGenre, genres}}>\n      {children}\n    </UserContext.Provider>\n  )\n}\n\nconst getUniqueList = (list, key) => {\n  return [...new Map(list.map(item => [item[key], item])).values()]\n}\n\n\n\nfunction App() {\n  const [selectedGenres, setSelectedGenres] = useState([])\n  const [genres, setListofGenres] = useState([])\n\n  const addSelectedGenres = (genre) => {\n    if (selectedGenres.includes(genre)) return\n    let chosenGenre = []\n    genres.map((genreItem) => {\n      if (genreItem.name == genre) chosenGenre.push(genreItem)\n    })\n    console.log(chosenGenre)\n    let newSelectedGenres = [...selectedGenres]\n    newSelectedGenres.push(genre)\n    console.log(newSelectedGenres)\n    setSelectedGenres(newSelectedGenres)\n  }\n\n  const getGenres = async() => {\n    const movieResponse = await fetch(movieGenreLink)\n    const tvResponse = await fetch(tvGenreLink)\n    const jsonMovie = await movieResponse.json()\n    const jsonTV = await tvResponse.json()\n    const listOfGenres = [...jsonMovie.genres, ...jsonTV.genres]\n    setListofGenres(getUniqueList(listOfGenres, 'id'))\n  }\n\n  const generateMovieTV = () => {\n    console.log('Add code for choosing random movie')\n  }\n\n  useEffect(() => {\n    getGenres()\n  }, [])\n  return (\n    <UserProvider generateMovieTV={generateMovieTV} addSelectedGenre={addSelectedGenres} genres={genres}>\n      <Router>\n        <div className='App'>\n          <Switch>\n            <Route path=\"/\" component={Home} exact/>\n            <Route path=\"/movies\" component={Movies}/>\n            <Route path=\"/tv-series\" component={TVSeries}/>\n          </Switch>\n        </div>\n      </Router>\n    </UserProvider>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}