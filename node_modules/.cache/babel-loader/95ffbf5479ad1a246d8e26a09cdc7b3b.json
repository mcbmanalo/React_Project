{"ast":null,"code":"var _jsxFileName = \"/home/mcbmanalo/React_Personal_Project/movie-suggestion/src/pages/TVSeries.js\",\n    _s = $RefreshSig$();\n\nimport Header from \"../modules/Header\";\nimport React, { useState, useContext, useEffect } from 'react';\nimport { MovieContext, UserContext } from \"../App\";\nimport Pagination from \"../modules/Pagination\";\nimport Loading from \"../modules/Loading\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst imagepath = process.env.REACT_APP_POSTER_PATH;\nconst discoverTV = process.env.REACT_APP_TV_LIST;\nconst key = process.env.REACT_APP_API_KEY;\n\nconst TVSeries = () => {\n  _s();\n\n  const [tvList, setNewTVList] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [currentPage, setCurrentPage] = useState(1); // this will be used for pagination later\n\n  const [lastPage, setLastPage] = useState(1);\n  const user = useContext(UserContext);\n  const {\n    tvGenre: genres\n  } = user; // const tvSeries = useContext(MovieContext);\n  // const {tvList, setNewTVList} = tvSeries\n\n  const getTVList = async () => {\n    const movieListResponse = await fetch(discoverMovie);\n    const jsonMovieList = await movieListResponse.json();\n    setNewMovieList(jsonMovieList.results);\n    setCurrentPage(jsonMovieList.page);\n    setLastPage(jsonMovieList.total_pages);\n    setLoading(false);\n  };\n\n  const getGenres = genreIDs => {\n    let movieGenre = [];\n    genres.map(genre => {\n      if (genreIDs.includes(genre.id)) movieGenre.push(genre.name);\n    });\n    return movieGenre.join(', ');\n  };\n\n  const setPagination = pageNumber => {\n    setLoading(true);\n    setCurrentPage(pageNumber);\n    generateNewTVPage(pageNumber);\n  };\n\n  const generateNewTVPage = async page => {\n    let discoverTVLink = `https://api.themoviedb.org/3/discover/tv?api_key=${key}&language=en-US&sort_by=popularity.desc&page=${page}`;\n    const newTVList = await fetch(discoverTVLink);\n    const newTVListResult = await newTVList.json();\n    setNewTVList(newTVListResult.results);\n    setLoading(false);\n  };\n\n  const generateTVSeries = tvList.results.map(series => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"movie\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        className: \"image\",\n        alt: series.name,\n        src: imagepath + series.poster_path\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"movieContent\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: series.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: getGenres(series.genre_ids)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"First Air Date: \", series.first_air_date]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: series.overview\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this)]\n    }, series.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this);\n  });\n  useEffect(() => {\n    setCurrentPage(tvList.page);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: generateTVSeries\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Pagination, {\n      currentPage: currentPage,\n      setCurrentPage: setPagination,\n      lastPage: tvList.total_pages\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 5\n  }, this);\n};\n\n_s(TVSeries, \"CdISLCEReMvG/nMNb9YZHbKKf/g=\");\n\n_c = TVSeries;\nexport default TVSeries;\n\nvar _c;\n\n$RefreshReg$(_c, \"TVSeries\");","map":{"version":3,"sources":["/home/mcbmanalo/React_Personal_Project/movie-suggestion/src/pages/TVSeries.js"],"names":["Header","React","useState","useContext","useEffect","MovieContext","UserContext","Pagination","Loading","imagepath","process","env","REACT_APP_POSTER_PATH","discoverTV","REACT_APP_TV_LIST","key","REACT_APP_API_KEY","TVSeries","tvList","setNewTVList","loading","setLoading","currentPage","setCurrentPage","lastPage","setLastPage","user","tvGenre","genres","getTVList","movieListResponse","fetch","discoverMovie","jsonMovieList","json","setNewMovieList","results","page","total_pages","getGenres","genreIDs","movieGenre","map","genre","includes","id","push","name","join","setPagination","pageNumber","generateNewTVPage","discoverTVLink","newTVList","newTVListResult","generateTVSeries","series","poster_path","genre_ids","first_air_date","overview"],"mappings":";;;AAAA,OAAOA,MAAP,MAAmB,mBAAnB;AACA,OAAOC,KAAP,IAAeC,QAAf,EAAyBC,UAAzB,EAAqCC,SAArC,QAAqD,OAArD;AACA,SAASC,YAAT,EAAuBC,WAAvB,QAA0C,QAA1C;AACA,OAAOC,UAAP,MAAuB,uBAAvB;AACA,OAAOC,OAAP,MAAoB,oBAApB;;AAEA,MAAMC,SAAS,GAAGC,OAAO,CAACC,GAAR,CAAYC,qBAA9B;AACA,MAAMC,UAAU,GAAGH,OAAO,CAACC,GAAR,CAAYG,iBAA/B;AACA,MAAMC,GAAG,GAAGL,OAAO,CAACC,GAAR,CAAYK,iBAAxB;;AAEA,MAAMC,QAAQ,GAAG,MAAM;AAAA;;AACrB,QAAM,CAACC,MAAD,EAASC,YAAT,IAAyBjB,QAAQ,CAAC,EAAD,CAAvC;AACA,QAAM,CAACkB,OAAD,EAAUC,UAAV,IAAwBnB,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM,CAACoB,WAAD,EAAcC,cAAd,IAAgCrB,QAAQ,CAAC,CAAD,CAA9C,CAHqB,CAG6B;;AAClD,QAAM,CAACsB,QAAD,EAAWC,WAAX,IAA0BvB,QAAQ,CAAC,CAAD,CAAxC;AACA,QAAMwB,IAAI,GAAGvB,UAAU,CAACG,WAAD,CAAvB;AACA,QAAM;AAACqB,IAAAA,OAAO,EAACC;AAAT,MAAmBF,IAAzB,CANqB,CAOrB;AACA;;AAEA,QAAMG,SAAS,GAAG,YAAW;AAC3B,UAAMC,iBAAiB,GAAG,MAAMC,KAAK,CAACC,aAAD,CAArC;AACA,UAAMC,aAAa,GAAG,MAAMH,iBAAiB,CAACI,IAAlB,EAA5B;AACAC,IAAAA,eAAe,CAACF,aAAa,CAACG,OAAf,CAAf;AACAb,IAAAA,cAAc,CAACU,aAAa,CAACI,IAAf,CAAd;AACAZ,IAAAA,WAAW,CAACQ,aAAa,CAACK,WAAf,CAAX;AACAjB,IAAAA,UAAU,CAAC,KAAD,CAAV;AACD,GAPD;;AASA,QAAMkB,SAAS,GAAIC,QAAD,IAAc;AAC9B,QAAIC,UAAU,GAAG,EAAjB;AACAb,IAAAA,MAAM,CAACc,GAAP,CAAYC,KAAD,IAAW;AACpB,UAAIH,QAAQ,CAACI,QAAT,CAAkBD,KAAK,CAACE,EAAxB,CAAJ,EAAiCJ,UAAU,CAACK,IAAX,CAAgBH,KAAK,CAACI,IAAtB;AAClC,KAFD;AAGA,WAAON,UAAU,CAACO,IAAX,CAAgB,IAAhB,CAAP;AACD,GAND;;AAQA,QAAMC,aAAa,GAAIC,UAAD,IAAgB;AACpC7B,IAAAA,UAAU,CAAC,IAAD,CAAV;AACAE,IAAAA,cAAc,CAAC2B,UAAD,CAAd;AACAC,IAAAA,iBAAiB,CAACD,UAAD,CAAjB;AACD,GAJD;;AAMA,QAAMC,iBAAiB,GAAG,MAAMd,IAAN,IAAe;AACvC,QAAIe,cAAc,GAAI,oDAAmDrC,GAAI,gDAA+CsB,IAAK,EAAjI;AACA,UAAMgB,SAAS,GAAG,MAAMtB,KAAK,CAACqB,cAAD,CAA7B;AACA,UAAME,eAAe,GAAG,MAAMD,SAAS,CAACnB,IAAV,EAA9B;AACAf,IAAAA,YAAY,CAACmC,eAAe,CAAClB,OAAjB,CAAZ;AACAf,IAAAA,UAAU,CAAC,KAAD,CAAV;AACD,GAND;;AAQA,QAAMkC,gBAAgB,GAAGrC,MAAM,CAACkB,OAAP,CAAeM,GAAf,CAAoBc,MAAD,IAAY;AACtD,wBACE;AAAqB,MAAA,SAAS,EAAC,OAA/B;AAAA,8BACE;AAAK,QAAA,SAAS,EAAC,OAAf;AAAuB,QAAA,GAAG,EAAEA,MAAM,CAACT,IAAnC;AAAyC,QAAA,GAAG,EAAEtC,SAAS,GAAG+C,MAAM,CAACC;AAAjE;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAK,QAAA,SAAS,EAAC,cAAf;AAAA,gCACE;AAAA,oBAAMD,MAAM,CAACT;AAAb;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAA,oBAAMR,SAAS,CAACiB,MAAM,CAACE,SAAR;AAAf;AAAA;AAAA;AAAA;AAAA,gBAFF,eAGE;AAAA,yCAAsBF,MAAM,CAACG,cAA7B;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHF,eAIE;AAAA,oBAAMH,MAAM,CAACI;AAAb;AAAA;AAAA;AAAA;AAAA,gBAJF;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA,OAAUJ,MAAM,CAACX,EAAjB;AAAA;AAAA;AAAA;AAAA,YADF;AAWD,GAZwB,CAAzB;AAcAzC,EAAAA,SAAS,CAAC,MAAM;AACdmB,IAAAA,cAAc,CAACL,MAAM,CAACmB,IAAR,CAAd;AACD,GAFQ,EAEN,EAFM,CAAT;AAIA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BACE,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAA,gBACGkB;AADH;AAAA;AAAA;AAAA;AAAA,YAFF,eAKE,QAAC,UAAD;AAAY,MAAA,WAAW,EAAEjC,WAAzB;AAAsC,MAAA,cAAc,EAAE2B,aAAtD;AAAqE,MAAA,QAAQ,EAAE/B,MAAM,CAACoB;AAAtF;AAAA;AAAA;AAAA;AAAA,YALF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AASD,CApED;;GAAMrB,Q;;KAAAA,Q;AAsEN,eAAeA,QAAf","sourcesContent":["import Header from \"../modules/Header\";\nimport React, {useState, useContext, useEffect} from 'react';\nimport { MovieContext, UserContext } from \"../App\";\nimport Pagination from \"../modules/Pagination\";\nimport Loading from \"../modules/Loading\";\n\nconst imagepath = process.env.REACT_APP_POSTER_PATH\nconst discoverTV = process.env.REACT_APP_TV_LIST \nconst key = process.env.REACT_APP_API_KEY\n\nconst TVSeries = () => {\n  const [tvList, setNewTVList] = useState([])\n  const [loading, setLoading] = useState(false)\n  const [currentPage, setCurrentPage] = useState(1) // this will be used for pagination later\n  const [lastPage, setLastPage] = useState(1)\n  const user = useContext(UserContext);\n  const {tvGenre:genres} = user;\n  // const tvSeries = useContext(MovieContext);\n  // const {tvList, setNewTVList} = tvSeries\n\n  const getTVList = async() => {\n    const movieListResponse = await fetch(discoverMovie)\n    const jsonMovieList = await movieListResponse.json()\n    setNewMovieList(jsonMovieList.results)\n    setCurrentPage(jsonMovieList.page)\n    setLastPage(jsonMovieList.total_pages)\n    setLoading(false)\n  }\n\n  const getGenres = (genreIDs) => {\n    let movieGenre = []\n    genres.map((genre) => {\n      if (genreIDs.includes(genre.id)) movieGenre.push(genre.name)\n    })\n    return movieGenre.join(', ')\n  }\n\n  const setPagination = (pageNumber) => {\n    setLoading(true)\n    setCurrentPage(pageNumber)\n    generateNewTVPage(pageNumber)\n  }\n\n  const generateNewTVPage = async(page) => {\n    let discoverTVLink = `https://api.themoviedb.org/3/discover/tv?api_key=${key}&language=en-US&sort_by=popularity.desc&page=${page}`\n    const newTVList = await fetch(discoverTVLink)\n    const newTVListResult = await newTVList.json()\n    setNewTVList(newTVListResult.results)\n    setLoading(false)\n  }\n\n  const generateTVSeries = tvList.results.map((series) => {\n    return (\n      <div key={series.id} className='movie'>\n        <img className='image' alt={series.name} src={imagepath + series.poster_path}/>\n        <div className='movieContent'>\n          <div>{series.name}</div> \n          <div>{getGenres(series.genre_ids)}</div>\n          <div>First Air Date: {series.first_air_date}</div>\n          <div>{series.overview}</div>\n        </div>\n      </div>\n    )\n  })\n\n  useEffect(() => {\n    setCurrentPage(tvList.page)\n  }, [])\n\n  return (\n    <div className='App'>\n      <Header />\n      <div>\n        {generateTVSeries}\n      </div>\n      <Pagination currentPage={currentPage} setCurrentPage={setPagination} lastPage={tvList.total_pages}/>\n    </div>\n  )\n}\n\nexport default TVSeries;"]},"metadata":{},"sourceType":"module"}