{"ast":null,"code":"var _jsxFileName = \"/home/mcbmanalo/React_Personal_Project/movie-suggestion/src/pages/Movies.js\",\n    _s = $RefreshSig$();\n\nimport Header from \"../modules/Header\";\nimport React, { useState, useContext, useEffect } from 'react';\nimport { MovieContext, UserContext } from \"../App\";\nimport Pagination from \"../modules/Pagination\";\nimport Loading from \"../modules/Loading\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst imagepath = process.env.REACT_APP_POSTER_PATH;\nconst discoverMovie = process.env.REACT_APP_MOVIE_LIST;\nconst key = process.env.REACT_APP_API_KEY;\n\nconst Movies = () => {\n  _s();\n\n  // Trying to re-create problem\n  const [movieList, setNewMovieList] = useState([]); // this will contain the movies from API\n\n  const [loading, setLoading] = useState(false);\n  const [currentPage, setCurrentPage] = useState(1); // this will be used for pagination later\n\n  const [lastPage, setLastPage] = useState(1);\n  const movies = useContext(MovieContext);\n  const user = useContext(UserContext);\n  const {\n    movieGenre: genres\n  } = user; // const {movieList, setNewMovieList} = movies // commented this for now to re-create problem\n  // Added this function to fetch data from API\n\n  const getMovieList = async () => {\n    const movieListResponse = await fetch(discoverMovie);\n    const jsonMovieList = await movieListResponse.json();\n    setNewMovieList(jsonMovieList.results);\n    setCurrentPage(jsonMovieList.page);\n    setLastPage(jsonMovieList.total_pages);\n    setLoading(false);\n  };\n\n  const getGenres = genreIDs => {\n    let movieGenre = [];\n    genres.map(genre => {\n      if (genreIDs.includes(genre.id)) movieGenre.push(genre.name);\n    });\n    return movieGenre.join(', ');\n  };\n\n  const setPagination = pageNumber => {\n    setTimeout(100);\n    setLoading(true);\n    setCurrentPage(pageNumber);\n    generateNewMoviesPage(pageNumber);\n  };\n\n  const generateNewMoviesPage = async page => {\n    let discoverMovieLink = `https://api.themoviedb.org/3/discover/movie?api_key=${key}&language=en-US&sort_by=popularity.desc&page=${page}`;\n    const newMovieList = await fetch(discoverMovieLink);\n    const newMovieListResult = await newMovieList.json();\n    setNewMovieList(newMovieListResult.results);\n    setLoading(false);\n  }; // const generateMovies = movieList.results.map((movie) => {\n  //   return (\n  //     <div key={movie.id} className='movie'>\n  //       <img className='image' alt={movie.title} src={imagepath + movie.poster_path}/>\n  //       <div className='movieContent'>\n  //         <div>{movie.title}</div> \n  //         <div>{getGenres(movie.genre_ids)}</div>\n  //         <div>Release Date: {movie.release_date}</div>\n  //         <div>{movie.overview}</div>\n  //       </div>\n  //     </div>\n  //   )\n  // })\n\n\n  const generateMovies = () => {\n    if (movieList.length > 0) {\n      return movieList.map(movie => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"movie\",\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            className: \"image\",\n            alt: movie.title,\n            src: imagepath + movie.poster_path\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"movieContent\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              children: movie.title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 78,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: getGenres(movie.genre_ids)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 79,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [\"Release Date: \", movie.release_date]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 80,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: movie.overview\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 81,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 15\n          }, this)]\n        }, movie.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 13\n        }, this);\n      });\n    }\n  }; // const isMovieList = () => {\n  //   if (movieList.length > 0) {\n  //     setLoading(false)\n  //     return false\n  //   }\n  //   return true\n  // }\n\n\n  useEffect(() => {\n    // From initial load must load movieList from API\n    setLoading(true);\n    getMovieList(); // setCurrentPage(1)\n  }, []); //   useEffect(() => {\n  //     isMovieList()\n  //  }, [movieList]);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this), loading ? /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: generateMovies()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Pagination, {\n        currentPage: currentPage,\n        setCurrentPage: setPagination,\n        lastPage: lastPage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 110,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Movies, \"7O/NwndEsiRO4IKPdhLWJam1IA4=\");\n\n_c = Movies;\nexport default Movies;\n\nvar _c;\n\n$RefreshReg$(_c, \"Movies\");","map":{"version":3,"sources":["/home/mcbmanalo/React_Personal_Project/movie-suggestion/src/pages/Movies.js"],"names":["Header","React","useState","useContext","useEffect","MovieContext","UserContext","Pagination","Loading","imagepath","process","env","REACT_APP_POSTER_PATH","discoverMovie","REACT_APP_MOVIE_LIST","key","REACT_APP_API_KEY","Movies","movieList","setNewMovieList","loading","setLoading","currentPage","setCurrentPage","lastPage","setLastPage","movies","user","movieGenre","genres","getMovieList","movieListResponse","fetch","jsonMovieList","json","results","page","total_pages","getGenres","genreIDs","map","genre","includes","id","push","name","join","setPagination","pageNumber","setTimeout","generateNewMoviesPage","discoverMovieLink","newMovieList","newMovieListResult","generateMovies","length","movie","title","poster_path","genre_ids","release_date","overview"],"mappings":"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","sourcesContent":["import Header from \"../modules/Header\";\nimport React, {useState, useContext, useEffect} from 'react';\nimport { MovieContext, UserContext } from \"../App\";\nimport Pagination from \"../modules/Pagination\";\nimport Loading from \"../modules/Loading\";\n\nconst imagepath = process.env.REACT_APP_POSTER_PATH\nconst discoverMovie = process.env.REACT_APP_MOVIE_LIST\nconst key = process.env.REACT_APP_API_KEY\n\nconst Movies = () => {\n  // Trying to re-create problem\n  const [movieList, setNewMovieList] = useState([]) // this will contain the movies from API\n  const [loading, setLoading] = useState(false)\n\n  const [currentPage, setCurrentPage] = useState(1) // this will be used for pagination later\n  const [lastPage, setLastPage] = useState(1)\n  const movies = useContext(MovieContext);\n  const user = useContext(UserContext);\n  const {movieGenre: genres} = user;\n  // const {movieList, setNewMovieList} = movies // commented this for now to re-create problem\n\n  // Added this function to fetch data from API\n  const getMovieList = async() => {\n    const movieListResponse = await fetch(discoverMovie)\n    const jsonMovieList = await movieListResponse.json()\n    setNewMovieList(jsonMovieList.results)\n    setCurrentPage(jsonMovieList.page)\n    setLastPage(jsonMovieList.total_pages)\n    setLoading(false)\n  }\n\n  const getGenres = (genreIDs) => {\n    let movieGenre = []\n    genres.map((genre) => {\n      if (genreIDs.includes(genre.id)) movieGenre.push(genre.name)\n    })\n    return movieGenre.join(', ')\n  }\n\n  const setPagination = (pageNumber) => {\n    setTimeout(100)\n    setLoading(true)\n    setCurrentPage(pageNumber)\n    generateNewMoviesPage(pageNumber)\n  }\n\n  const generateNewMoviesPage = async(page) => {\n    let discoverMovieLink = `https://api.themoviedb.org/3/discover/movie?api_key=${key}&language=en-US&sort_by=popularity.desc&page=${page}`\n    const newMovieList = await fetch(discoverMovieLink)\n    const newMovieListResult = await newMovieList.json()\n    setNewMovieList(newMovieListResult.results)\n    setLoading(false)\n  }\n\n  // const generateMovies = movieList.results.map((movie) => {\n  //   return (\n  //     <div key={movie.id} className='movie'>\n  //       <img className='image' alt={movie.title} src={imagepath + movie.poster_path}/>\n  //       <div className='movieContent'>\n  //         <div>{movie.title}</div> \n  //         <div>{getGenres(movie.genre_ids)}</div>\n  //         <div>Release Date: {movie.release_date}</div>\n  //         <div>{movie.overview}</div>\n  //       </div>\n  //     </div>\n  //   )\n  // })\n\n  const generateMovies = () => {\n    if (movieList.length > 0) {\n      return (\n        movieList.map((movie) => {\n          return (\n            <div key={movie.id} className='movie'>\n              <img className='image' alt={movie.title} src={imagepath + movie.poster_path}/>\n              <div className='movieContent'>\n                <div>{movie.title}</div> \n                <div>{getGenres(movie.genre_ids)}</div>\n                <div>Release Date: {movie.release_date}</div>\n                <div>{movie.overview}</div>\n              </div>\n            </div>\n          )\n        })\n      )\n    }\n  }\n\n  // const isMovieList = () => {\n  //   if (movieList.length > 0) {\n  //     setLoading(false)\n  //     return false\n  //   }\n  //   return true\n  // }\n\n  useEffect(() => {\n    // From initial load must load movieList from API\n    setLoading(true)\n    getMovieList()\n    // setCurrentPage(1)\n  }, [])\n\n//   useEffect(() => {\n//     isMovieList()\n//  }, [movieList]);\n\n  return (\n    <div>\n      <Header/>\n      {\n        loading ? \n        <Loading/> :\n        <div>\n          <div>\n           {generateMovies()}\n          </div>\n          <Pagination currentPage={currentPage} setCurrentPage={setPagination} lastPage={lastPage}/>\n        </div>\n      }\n      \n    </div>\n  )\n}\n\nexport default Movies;"]},"metadata":{},"sourceType":"module"}