{"ast":null,"code":"var _jsxFileName = \"/home/mcbmanalo/React_Personal_Project/movie-suggestion/src/App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport React, { useState, useEffect } from 'react';\nimport { Switch, Route, useHistory } from 'react-router-dom';\nimport Home from './pages/Home';\nimport Movies from './pages/Movies';\nimport TVSeries from './pages/TVSeries';\nimport Random from './pages/Random';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const UserContext = /*#__PURE__*/React.createContext();\nexport const MovieContext = /*#__PURE__*/React.createContext();\nexport const GenreOptionContext = /*#__PURE__*/React.createContext();\nconst key = process.env.REACT_APP_API_KEY;\nconst movieGenreLink = process.env.REACT_APP_MOVIE_GENRE_URI;\nconst tvGenreLink = process.env.REACT_APP_TV_GENRE_URI;\nconst discoverMovie = process.env.REACT_APP_MOVIE_LIST; // try moving the fetching data of movies to movie page later\n\nconst discoverTV = process.env.REACT_APP_TV_LIST; // try moving the fetching data of movies to tv series page later\n\nconst UserProvider = props => {\n  const {\n    children,\n    generateMovieTV,\n    addSelectedGenre,\n    genres,\n    movieGenre,\n    tvGenre,\n    resetSelectedGenres\n  } = props;\n  return /*#__PURE__*/_jsxDEV(UserContext.Provider, {\n    value: {\n      generateMovieTV,\n      addSelectedGenre,\n      genres,\n      movieGenre,\n      tvGenre,\n      resetSelectedGenres\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 5\n  }, this);\n};\n\n_c = UserProvider;\n\nconst MovieProvider = props => {\n  const {\n    children,\n    movieList,\n    tvList\n  } = props;\n  return /*#__PURE__*/_jsxDEV(MovieContext.Provider, {\n    value: {\n      movieList,\n      tvList\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n};\n\n_c2 = MovieProvider;\n\nconst GenreOptionProvider = props => {\n  const {\n    children,\n    movieGenre,\n    tvGenre,\n    addSelectedGenre,\n    isMovie,\n    setIsMovie\n  } = props;\n  return /*#__PURE__*/_jsxDEV(GenreOptionContext.Provider, {\n    value: {\n      movieGenre,\n      tvGenre,\n      addSelectedGenre,\n      isMovie,\n      setIsMovie\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n};\n\n_c3 = GenreOptionProvider;\n\nconst getUniqueList = (list, key) => {\n  return [...new Map(list.map(item => [item[key], item])).values()];\n}; // const testGenre = (list1, list2) => {\n//   let newList = [...list1]\n//   list2.map((item) => {\n//     newList.push(list1.find(list1Item => list1Item.id === item.id))\n//   })\n//   console.log('Test Log')\n//   console.log(newList)\n// }\n\n\nconst App = props => {\n  _s();\n\n  const [selectedGenres, setSelectedGenres] = useState([]);\n  const [genres, setListofGenres] = useState([]);\n  const [movieGenre, setMovieGenre] = useState([]);\n  const [tvGenre, setTVGenre] = useState([]);\n  const [movieList, setMovieList] = useState([]);\n  const [tvList, settvList] = useState([]);\n  const [isMovie, setIsMovie] = useState([true]);\n  const history = useHistory();\n\n  const addSelectedGenres = genre => {\n    if (selectedGenres.includes(genre)) return;\n    let chosenGenre = [...selectedGenres];\n    genres.map(genreItem => {\n      if (genreItem.name === genre) return chosenGenre.push(genreItem);\n      return null;\n    });\n    console.log(chosenGenre);\n    setSelectedGenres(chosenGenre);\n  };\n\n  const resetSelectedGenres = value => {\n    setSelectedGenres(value);\n  };\n\n  const makeLink = (type, includedGenres) => {\n    let linkGenres = includedGenres.join('%2C%20');\n    let lookLink = `https://api.themoviedb.org/3/discover/${type}?api_key=${key}&language=en-US&sort_by=popularity.desc$with_genres=${linkGenres}`;\n  };\n\n  const getGenres = async () => {\n    const movieResponse = await fetch(movieGenreLink);\n    const tvResponse = await fetch(tvGenreLink);\n    const jsonMovie = await movieResponse.json();\n    const jsonTV = await tvResponse.json();\n    setMovieGenre(jsonMovie.genres);\n    setTVGenre(jsonTV.genres);\n    const listOfGenres = [...jsonMovie.genres, ...jsonTV.genres]; // testGenre(jsonMovie.genres, jsonTV.genres)\n\n    setListofGenres(getUniqueList(listOfGenres, 'id'));\n  };\n\n  const getMovieList = async () => {\n    const movieListResponse = await fetch(discoverMovie);\n    const jsonMovieList = await movieListResponse.json();\n    setMovieList(jsonMovieList);\n  };\n\n  const getTVList = async () => {\n    const TVListResponse = await fetch(discoverTV);\n    const jsonTVList = await TVListResponse.json();\n    settvList(jsonTVList);\n  };\n\n  const generateMovieTV = () => {\n    console.log('Selected genre');\n    console.log(selectedGenres);\n    console.log('movieList');\n    console.log(movieList);\n    console.log('tvList');\n    console.log(tvList);\n    history.push('/suggest');\n  };\n\n  useEffect(() => {\n    getGenres();\n    getMovieList();\n    getTVList();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(UserProvider, {\n    generateMovieTV: generateMovieTV,\n    addSelectedGenre: addSelectedGenres,\n    genres: genres,\n    movieGenre: movieGenre,\n    tvGenre: tvGenre,\n    resetSelectedGenres: resetSelectedGenres,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(Switch, {\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          path: \"/\",\n          component: Home,\n          exact: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(MovieProvider, {\n          movieList: movieList,\n          tvList: tvList,\n          children: [/*#__PURE__*/_jsxDEV(Route, {\n            path: \"/movies\",\n            component: Movies\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 144,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Route, {\n            path: \"/tv-series\",\n            component: TVSeries\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Route, {\n            path: \"/suggest\",\n            component: Random\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"TMDb\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"This product uses the TMDB API but is not endorsed or certified by TMDB\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          className: \"TMDB-logo\",\n          src: \"https://www.themoviedb.org/assets/2/v4/logos/v2/blue_short-8e7b30f73a4020692ccca9c88bafe5dcb6f8a62a4c6bc55cd9ba82bb2cd95f6c.svg\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 133,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"7H5jNKk7W4Vf7Uv6UcAKdNgIADQ=\", false, function () {\n  return [useHistory];\n});\n\n_c4 = App;\nexport default App;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"UserProvider\");\n$RefreshReg$(_c2, \"MovieProvider\");\n$RefreshReg$(_c3, \"GenreOptionProvider\");\n$RefreshReg$(_c4, \"App\");","map":{"version":3,"sources":["/home/mcbmanalo/React_Personal_Project/movie-suggestion/src/App.js"],"names":["React","useState","useEffect","Switch","Route","useHistory","Home","Movies","TVSeries","Random","UserContext","createContext","MovieContext","GenreOptionContext","key","process","env","REACT_APP_API_KEY","movieGenreLink","REACT_APP_MOVIE_GENRE_URI","tvGenreLink","REACT_APP_TV_GENRE_URI","discoverMovie","REACT_APP_MOVIE_LIST","discoverTV","REACT_APP_TV_LIST","UserProvider","props","children","generateMovieTV","addSelectedGenre","genres","movieGenre","tvGenre","resetSelectedGenres","MovieProvider","movieList","tvList","GenreOptionProvider","isMovie","setIsMovie","getUniqueList","list","Map","map","item","values","App","selectedGenres","setSelectedGenres","setListofGenres","setMovieGenre","setTVGenre","setMovieList","settvList","history","addSelectedGenres","genre","includes","chosenGenre","genreItem","name","push","console","log","value","makeLink","type","includedGenres","linkGenres","join","lookLink","getGenres","movieResponse","fetch","tvResponse","jsonMovie","json","jsonTV","listOfGenres","getMovieList","movieListResponse","jsonMovieList","getTVList","TVListResponse","jsonTVList"],"mappings":"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","sourcesContent":["import './App.css';\nimport React, { useState, useEffect } from 'react';\nimport { \n  Switch,\n  Route,\n  useHistory\n} from 'react-router-dom';\nimport Home from './pages/Home';\nimport Movies from './pages/Movies';\nimport TVSeries from './pages/TVSeries';\nimport Random from './pages/Random';\n\nexport const UserContext = React.createContext();\nexport const MovieContext = React.createContext();\nexport const GenreOptionContext = React.createContext();\nconst key = process.env.REACT_APP_API_KEY\nconst movieGenreLink = process.env.REACT_APP_MOVIE_GENRE_URI\nconst tvGenreLink = process.env.REACT_APP_TV_GENRE_URI\nconst discoverMovie = process.env.REACT_APP_MOVIE_LIST // try moving the fetching data of movies to movie page later\nconst discoverTV = process.env.REACT_APP_TV_LIST // try moving the fetching data of movies to tv series page later\n\nconst UserProvider = (props) => {\n  const {children, generateMovieTV, addSelectedGenre, genres, movieGenre, tvGenre, resetSelectedGenres} = props\n  return (\n    <UserContext.Provider value={{generateMovieTV, addSelectedGenre, genres, movieGenre, tvGenre, resetSelectedGenres}}>\n      {children}\n    </UserContext.Provider>\n  )\n}\n\nconst MovieProvider = (props) => {\n  const {children, movieList, tvList} = props\n  return (\n    <MovieContext.Provider value={{movieList, tvList}}>\n      {children}\n    </MovieContext.Provider>\n  )\n}\n\nconst GenreOptionProvider = (props) => {\n  const {children, movieGenre, tvGenre, addSelectedGenre, isMovie, setIsMovie} = props\n  return (\n    <GenreOptionContext.Provider value={{movieGenre, tvGenre, addSelectedGenre, isMovie, setIsMovie}}>\n      {children}\n    </GenreOptionContext.Provider>\n  )\n}\n\nconst getUniqueList = (list, key) => {\n  return [...new Map(list.map(item => [item[key], item])).values()]\n}\n\n// const testGenre = (list1, list2) => {\n//   let newList = [...list1]\n//   list2.map((item) => {\n//     newList.push(list1.find(list1Item => list1Item.id === item.id))\n//   })\n//   console.log('Test Log')\n//   console.log(newList)\n// }\n\nconst App = props => {\n  const [selectedGenres, setSelectedGenres] = useState([])\n  const [genres, setListofGenres] = useState([])\n  const [movieGenre, setMovieGenre] = useState([])\n  const [tvGenre, setTVGenre] = useState([])\n  const [movieList, setMovieList] = useState([])\n  const [tvList, settvList] = useState([])\n  const [isMovie, setIsMovie] = useState([true])\n  const history = useHistory();\n\n  const addSelectedGenres = (genre) => {\n    if (selectedGenres.includes(genre)) return\n    let chosenGenre = [...selectedGenres]\n    genres.map((genreItem) => {\n      if (genreItem.name === genre) return chosenGenre.push(genreItem)\n      return null\n    })\n    console.log(chosenGenre)\n    setSelectedGenres(chosenGenre)\n  }\n\n  const resetSelectedGenres = (value) => {\n    setSelectedGenres(value)\n  }\n\n  const makeLink = (type, includedGenres) => {\n    let linkGenres = includedGenres.join('%2C%20')\n    let lookLink = `https://api.themoviedb.org/3/discover/${type}?api_key=${key}&language=en-US&sort_by=popularity.desc$with_genres=${linkGenres}`\n  }\n\n  const getGenres = async() => {\n    const movieResponse = await fetch(movieGenreLink)\n    const tvResponse = await fetch(tvGenreLink)\n    const jsonMovie = await movieResponse.json()\n    const jsonTV = await tvResponse.json()\n    setMovieGenre(jsonMovie.genres)\n    setTVGenre(jsonTV.genres)\n    const listOfGenres = [...jsonMovie.genres, ...jsonTV.genres]\n    // testGenre(jsonMovie.genres, jsonTV.genres)\n    setListofGenres(getUniqueList(listOfGenres, 'id'))\n  }\n\n  const getMovieList = async() => {\n    const movieListResponse = await fetch(discoverMovie)\n    const jsonMovieList = await movieListResponse.json()\n    setMovieList(jsonMovieList) \n  }\n  \n  const getTVList = async() => {\n    const TVListResponse = await fetch(discoverTV)\n    const jsonTVList = await TVListResponse.json()\n    settvList(jsonTVList) \n  }\n\n  const generateMovieTV = () => {\n    console.log('Selected genre')\n    console.log(selectedGenres)\n    console.log('movieList')\n    console.log(movieList)\n    console.log('tvList')\n    console.log(tvList)\n    history.push('/suggest')\n  }\n\n  useEffect(() => {\n    getGenres()\n    getMovieList()\n    getTVList()\n  }, [])\n  \n  return (\n    <UserProvider \n      generateMovieTV={generateMovieTV} \n      addSelectedGenre={addSelectedGenres} \n      genres={genres} \n      movieGenre={movieGenre} \n      tvGenre={tvGenre} \n      resetSelectedGenres={resetSelectedGenres}>\n        <div className='App'>\n          <Switch>\n            <Route path=\"/\" component={Home} exact/>\n            <MovieProvider movieList={movieList} tvList={tvList}>\n              <Route path=\"/movies\" component={Movies}/>\n              <Route path=\"/tv-series\" component={TVSeries}/>\n              <Route path=\"/suggest\" component={Random} />\n            </MovieProvider>\n          </Switch>\n          <div className='TMDb'>\n            <div>\n              This product uses the TMDB API but is not endorsed or certified by TMDB\n            </div>\n            <img className='TMDB-logo' src='https://www.themoviedb.org/assets/2/v4/logos/v2/blue_short-8e7b30f73a4020692ccca9c88bafe5dcb6f8a62a4c6bc55cd9ba82bb2cd95f6c.svg'/>\n          </div>\n        </div>\n    </UserProvider>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}