{"ast":null,"code":"var _jsxFileName = \"/home/mcbmanalo/React_Personal_Project/movie-suggestion/src/modules/GenreOptions.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext } from 'react';\nimport { UserContext } from '../App';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst GenreOptions = () => {\n  _s();\n\n  const user = useContext(UserContext);\n  const {\n    isMovie,\n    movieGenre,\n    tvGenre,\n    addSelectedGenre,\n    resetSelectedGenres,\n    setMovieOption,\n    selectedGenres\n  } = user;\n\n  const isSelected = genreName => {\n    const selectedGenreNames = selectedGenres.map(genre => genre.name);\n    if (selectedGenreNames.includes(genreName)) return 'selected';\n    return 'showType';\n  };\n\n  const generateMovieGenres = movieGenre.map(genre => {\n    const key = `${genre.name}-${genre.id}`;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: isSelected(genre.name),\n      onClick: event => addSelectedGenre(event.target.textContent),\n      children: genre.name\n    }, key, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 12\n    }, this);\n  });\n  const generateTVGenres = tvGenre.map(genre => {\n    const key = `${genre.name}-${genre.id}`;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: isSelected(genre.name),\n      onClick: event => addSelectedGenre(event.target.textContent),\n      children: genre.name\n    }, key, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 12\n    }, this);\n  });\n\n  const generateSelectedTVGenres = () => {\n    return tvGenre.map(genre => {\n      const key = `${genre.name}-${genre.id}`;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: isSelected(genre.name),\n        onClick: event => addSelectedGenre(event.target.textContent),\n        children: genre.name\n      }, key, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 16\n      }, this);\n    });\n  };\n\n  const setMovieGenre = () => {\n    if (!isMovie) resetSelectedGenres();\n    setMovieOption(true);\n  };\n\n  const setTVGenre = () => {\n    if (isMovie) resetSelectedGenres();\n    setMovieOption(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App-genres\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App-options\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: isMovie ? 'selected' : 'showType',\n        onClick: setMovieGenre,\n        children: \"Movie Genres\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: isMovie ? 'showType' : 'selected',\n        onClick: setTVGenre,\n        children: \"TV Series Genres\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"quotes\",\n      children: \"Choose a genre that you would like to base the generator\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), user.isMovie ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Genres\",\n      children: generateMovieGenres\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Genres\",\n      children: generateTVGenres\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n};\n\n_s(GenreOptions, \"T/slviYl6xUb2nQaiedYLY1KgOo=\");\n\n_c = GenreOptions;\nexport default GenreOptions;\n\nvar _c;\n\n$RefreshReg$(_c, \"GenreOptions\");","map":{"version":3,"sources":["/home/mcbmanalo/React_Personal_Project/movie-suggestion/src/modules/GenreOptions.js"],"names":["React","useContext","UserContext","GenreOptions","user","isMovie","movieGenre","tvGenre","addSelectedGenre","resetSelectedGenres","setMovieOption","selectedGenres","isSelected","genreName","selectedGenreNames","map","genre","name","includes","generateMovieGenres","key","id","event","target","textContent","generateTVGenres","generateSelectedTVGenres","setMovieGenre","setTVGenre"],"mappings":"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","sourcesContent":["import React, {useContext} from 'react';\nimport { UserContext } from '../App'\n\nconst GenreOptions = () => {\n  const user = useContext(UserContext);\n  const {isMovie, movieGenre, tvGenre, addSelectedGenre, resetSelectedGenres, setMovieOption, selectedGenres} = user\n\n  \n  const isSelected = (genreName) => {\n    const selectedGenreNames = selectedGenres.map(genre => genre.name)\n    if (selectedGenreNames.includes(genreName)) return 'selected'\n    return 'showType'\n  }\n\n  const generateMovieGenres = movieGenre.map((genre) => {\n    const key = `${genre.name}-${genre.id}`\n    return <div className={isSelected(genre.name)} onClick={(event) => addSelectedGenre(event.target.textContent)} key={key}>{genre.name}</div>\n  })\n\n  const generateTVGenres = tvGenre.map((genre) => {\n    const key = `${genre.name}-${genre.id}`\n    return <div className={isSelected(genre.name)} onClick={(event) => addSelectedGenre(event.target.textContent)} key={key}>{genre.name}</div>\n  })\n\n  const generateSelectedTVGenres = () => {\n    return (\n      tvGenre.map((genre) => {\n        const key = `${genre.name}-${genre.id}`\n        return <div className={isSelected(genre.name)} onClick={(event) => addSelectedGenre(event.target.textContent)} key={key}>{genre.name}</div>\n      })\n    )\n  }\n\n  const setMovieGenre = () => {\n    if (!isMovie) resetSelectedGenres()\n    setMovieOption(true)\n  }\n\n  const setTVGenre = () => {\n    if (isMovie) resetSelectedGenres()\n    setMovieOption(false)\n  }\n\n\n  return (\n    <div className='App-genres'>\n      <div className='App-options'>\n        <div className={isMovie ? 'selected' : 'showType'} onClick={setMovieGenre}>\n          Movie Genres\n        </div>\n        <div className={isMovie ? 'showType' : 'selected'}  onClick={setTVGenre}>\n          TV Series Genres\n        </div>\n      </div>\n\n      <div className='quotes'>Choose a genre that you would like to base the generator</div>\n      { user.isMovie ? \n        <div className='Genres'>{generateMovieGenres}</div> : \n        <div className='Genres'>{generateTVGenres}</div>\n      }\n    </div>\n  )\n}\n\nexport default GenreOptions;"]},"metadata":{},"sourceType":"module"}