{"ast":null,"code":"var _jsxFileName = \"/home/mcbmanalo/React_Personal_Project/movie-suggestion/src/App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport React, { useState, useEffect } from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport Home from './pages/Home';\nimport Movies from './pages/Movies';\nimport TVSeries from './pages/TVSeries';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const UserContext = /*#__PURE__*/React.createContext();\nconst key = process.env.REACT_APP_API_KEY;\nconst movieGenreLink = process.env.REACT_APP_MOVIE_GENRE_URI;\nconst tvGenreLink = process.env.REACT_APP_TV_GENRE_URI;\nconst discoverMovie = process.env.REACT_APP_MOVIE_LIST;\nconst discoverTV = process.env.REACT_APP_TV_LIST;\n\nconst UserProvider = props => {\n  const {\n    children,\n    generateMovieTV,\n    addSelectedGenre,\n    genres\n  } = props;\n  return /*#__PURE__*/_jsxDEV(UserContext.Provider, {\n    value: {\n      generateMovieTV,\n      addSelectedGenre,\n      genres\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 5\n  }, this);\n};\n\n_c = UserProvider;\n\nconst getUniqueList = (list, key) => {\n  return [...new Map(list.map(item => [item[key], item])).values()];\n};\n\nfunction App() {\n  _s();\n\n  const [selectedGenres, setSelectedGenres] = useState([]);\n  const [genres, setListofGenres] = useState([]);\n  const [movieList, setMovieList] = useState([]);\n  const [tvList, settvList] = useState([]);\n\n  const addSelectedGenres = genre => {\n    if (selectedGenres.includes(genre)) return;\n    let chosenGenre = [...selectedGenres];\n    genres.map(genreItem => {\n      if (genreItem.name == genre) chosenGenre.push(genreItem);\n    });\n    console.log(chosenGenre); // let newSelectedGenres = [...selectedGenres]\n    // newSelectedGenres.push(genre)\n    // console.log(newSelectedGenres)\n\n    setSelectedGenres(chosenGenre);\n  };\n\n  const getGenres = async () => {\n    const movieResponse = await fetch(movieGenreLink);\n    const tvResponse = await fetch(tvGenreLink);\n    const jsonMovie = await movieResponse.json();\n    const jsonTV = await tvResponse.json();\n    const listOfGenres = [...jsonMovie.genres, ...jsonTV.genres];\n    setListofGenres(getUniqueList(listOfGenres, 'id'));\n  };\n\n  const getMovieList = async () => {\n    const movieListResponse = await fetch(discoverMovie);\n    const jsonMovieList = await movieListResponse.json();\n    setMovieList(jsonMovieList);\n  };\n\n  const getTVList = async () => {\n    const TVListResponse = await fetch(discoverTV);\n    const jsonTVList = await TVListResponse.json();\n    settvList(jsonTVList);\n  };\n\n  const generateMovieTV = () => {\n    console.log('Add code for choosing random movie');\n  };\n\n  useEffect(() => {\n    getGenres();\n    getMovieList();\n    getTVList();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(UserProvider, {\n    generateMovieTV: generateMovieTV,\n    addSelectedGenre: addSelectedGenres,\n    genres: genres,\n    children: /*#__PURE__*/_jsxDEV(Router, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"App\",\n        children: /*#__PURE__*/_jsxDEV(Switch, {\n          children: [/*#__PURE__*/_jsxDEV(Route, {\n            path: \"/\",\n            component: Home,\n            exact: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Route, {\n            path: \"/movies\",\n            component: Movies\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Route, {\n            path: \"/tv-series\",\n            component: TVSeries\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"qLuE3pHy18QT9iLGaCekYYWkQA0=\");\n\n_c2 = App;\nexport default App;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"UserProvider\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"sources":["/home/mcbmanalo/React_Personal_Project/movie-suggestion/src/App.js"],"names":["React","useState","useEffect","BrowserRouter","Router","Switch","Route","Home","Movies","TVSeries","UserContext","createContext","key","process","env","REACT_APP_API_KEY","movieGenreLink","REACT_APP_MOVIE_GENRE_URI","tvGenreLink","REACT_APP_TV_GENRE_URI","discoverMovie","REACT_APP_MOVIE_LIST","discoverTV","REACT_APP_TV_LIST","UserProvider","props","children","generateMovieTV","addSelectedGenre","genres","getUniqueList","list","Map","map","item","values","App","selectedGenres","setSelectedGenres","setListofGenres","movieList","setMovieList","tvList","settvList","addSelectedGenres","genre","includes","chosenGenre","genreItem","name","push","console","log","getGenres","movieResponse","fetch","tvResponse","jsonMovie","json","jsonTV","listOfGenres","getMovieList","movieListResponse","jsonMovieList","getTVList","TVListResponse","jsonTVList"],"mappings":"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","sourcesContent":["import './App.css';\nimport React, { useState, useEffect } from 'react';\nimport { \n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from 'react-router-dom';\nimport Home from './pages/Home';\nimport Movies from './pages/Movies';\nimport TVSeries from './pages/TVSeries';\n\nexport const UserContext = React.createContext();\nconst key = process.env.REACT_APP_API_KEY\nconst movieGenreLink = process.env.REACT_APP_MOVIE_GENRE_URI\nconst tvGenreLink = process.env.REACT_APP_TV_GENRE_URI\nconst discoverMovie = process.env.REACT_APP_MOVIE_LIST\nconst discoverTV = process.env.REACT_APP_TV_LIST\n\nconst UserProvider = (props) => {\n  const {children, generateMovieTV, addSelectedGenre, genres} = props\n  return (\n    <UserContext.Provider value={{generateMovieTV, addSelectedGenre, genres}}>\n      {children}\n    </UserContext.Provider>\n  )\n}\n\nconst getUniqueList = (list, key) => {\n  return [...new Map(list.map(item => [item[key], item])).values()]\n}\n\nfunction App() {\n  const [selectedGenres, setSelectedGenres] = useState([])\n  const [genres, setListofGenres] = useState([])\n  const [movieList, setMovieList] = useState([])\n  const [tvList, settvList] = useState([])\n\n  const addSelectedGenres = (genre) => {\n    if (selectedGenres.includes(genre)) return\n    let chosenGenre = [...selectedGenres]\n    genres.map((genreItem) => {\n      if (genreItem.name == genre) chosenGenre.push(genreItem)\n    })\n    console.log(chosenGenre)\n    // let newSelectedGenres = [...selectedGenres]\n    // newSelectedGenres.push(genre)\n    // console.log(newSelectedGenres)\n    setSelectedGenres(chosenGenre)\n  }\n\n  const getGenres = async() => {\n    const movieResponse = await fetch(movieGenreLink)\n    const tvResponse = await fetch(tvGenreLink)\n    const jsonMovie = await movieResponse.json()\n    const jsonTV = await tvResponse.json()\n    const listOfGenres = [...jsonMovie.genres, ...jsonTV.genres]\n    setListofGenres(getUniqueList(listOfGenres, 'id'))\n  }\n\n  const getMovieList = async() => {\n    const movieListResponse = await fetch(discoverMovie)\n    const jsonMovieList = await movieListResponse.json()\n    setMovieList(jsonMovieList) \n  }\n  \n  const getTVList = async() => {\n    const TVListResponse = await fetch(discoverTV)\n    const jsonTVList = await TVListResponse.json()\n    settvList(jsonTVList) \n  }\n\n  const generateMovieTV = () => {\n    console.log('Add code for choosing random movie')\n  }\n\n  useEffect(() => {\n    getGenres()\n    getMovieList()\n    getTVList()\n  }, [])\n  return (\n    <UserProvider generateMovieTV={generateMovieTV} addSelectedGenre={addSelectedGenres} genres={genres}>\n      <Router>\n        <div className='App'>\n          <Switch>\n            <Route path=\"/\" component={Home} exact/>\n            <Route path=\"/movies\" component={Movies}/>\n            <Route path=\"/tv-series\" component={TVSeries}/>\n          </Switch>\n        </div>\n      </Router>\n    </UserProvider>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}