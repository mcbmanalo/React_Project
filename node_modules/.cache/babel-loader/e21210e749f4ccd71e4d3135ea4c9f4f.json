{"ast":null,"code":"var _jsxFileName = \"/home/mcbmanalo/React_Personal_Project/movie-suggestion/src/pages/Movies.js\",\n    _s = $RefreshSig$();\n\nimport Header from \"../modules/Header\";\nimport React, { useState, useContext, useEffect } from 'react';\nimport { MovieContext, UserContext } from \"../App\";\nimport Pagination from \"../modules/Pagination\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst imagepath = process.env.REACT_APP_POSTER_PATH;\nconst discoverMovie = process.env.REACT_APP_MOVIE_LIST;\nconst key = process.env.REACT_APP_API_KEY;\n\nconst Movies = () => {\n  _s();\n\n  // Trying to re-create problem\n  const [movieList, setNewMovieList] = useState([]); // this will contain the movies from API\n\n  const [currentPage, setCurrentPage] = useState(0); // this will be used for pagination later\n\n  const movies = useContext(MovieContext);\n  const user = useContext(UserContext);\n  const {\n    movieGenre: genres\n  } = user; // const {movieList, setNewMovieList} = movies // commented this for now to re-create problem\n  // Added this function to fetch data from API\n\n  const getMovieList = async () => {\n    const movieListResponse = await fetch(discoverMovie);\n    const jsonMovieList = await movieListResponse.json();\n    setNewMovieList(jsonMovieList);\n  };\n\n  const getGenres = genreIDs => {\n    let movieGenre = [];\n    genres.map(genre => {\n      if (genreIDs.includes(genre.id)) movieGenre.push(genre.name);\n    });\n    return movieGenre.join(', ');\n  };\n\n  const setPagination = pageNumber => {\n    setCurrentPage(pageNumber);\n    generateNewMoviesPage(pageNumber);\n  };\n\n  const generateNewMoviesPage = async page => {\n    let discoverMovieLink = `https://api.themoviedb.org/3/discover/movie?api_key=${key}&language=en-US&sort_by=popularity.desc&page=${page}`;\n    const newMovieList = await fetch(discoverMovieLink);\n    const newMovieListResult = await newMovieList.json();\n    setNewMovieList(newMovieListResult);\n  }; // const generateMovies = movieList.results.map((movie) => {\n  //   return (\n  //     <div key={movie.id} className='movie'>\n  //       <img className='image' alt={movie.title} src={imagepath + movie.poster_path}/>\n  //       <div className='movieContent'>\n  //         <div>{movie.title}</div> \n  //         <div>{getGenres(movie.genre_ids)}</div>\n  //         <div>Release Date: {movie.release_date}</div>\n  //         <div>{movie.overview}</div>\n  //       </div>\n  //     </div>\n  //   )\n  // })\n\n\n  const generateMovies = () => {\n    console.log(movieList);\n    return movieList.results.map(movie => {\n      /*#__PURE__*/\n      _jsxDEV(\"div\", {\n        className: \"movie\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          className: \"image\",\n          alt: movie.title,\n          src: imagepath + movie.poster_path\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"movieContent\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: movie.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: getGenres(movie.genre_ids)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [\"Release Date: \", movie.release_date]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: movie.overview\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 11\n        }, this)]\n      }, movie.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this);\n    });\n  };\n\n  useEffect(() => {\n    // From initial load must load movieList from API\n    getMovieList(); // setCurrentPage(movieList.page)\n\n    setCurrentPage(1);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: movieList.results.map(movie => {\n        /*#__PURE__*/\n        _jsxDEV(\"div\", {\n          className: \"movie\",\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            className: \"image\",\n            alt: movie.title,\n            src: imagepath + movie.poster_path\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"movieContent\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              children: movie.title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 94,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: getGenres(movie.genre_ids)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 95,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [\"Release Date: \", movie.release_date]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 96,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: movie.overview\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 97,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 15\n          }, this)]\n        }, movie.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Pagination, {\n      currentPage: currentPage,\n      setCurrentPage: setPagination,\n      lastPage: movieList.total_pages\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Movies, \"ttEbMfHZqhZZsYZhLXBxNOCwsUQ=\");\n\n_c = Movies;\nexport default Movies;\n\nvar _c;\n\n$RefreshReg$(_c, \"Movies\");","map":{"version":3,"sources":["/home/mcbmanalo/React_Personal_Project/movie-suggestion/src/pages/Movies.js"],"names":["Header","React","useState","useContext","useEffect","MovieContext","UserContext","Pagination","imagepath","process","env","REACT_APP_POSTER_PATH","discoverMovie","REACT_APP_MOVIE_LIST","key","REACT_APP_API_KEY","Movies","movieList","setNewMovieList","currentPage","setCurrentPage","movies","user","movieGenre","genres","getMovieList","movieListResponse","fetch","jsonMovieList","json","getGenres","genreIDs","map","genre","includes","id","push","name","join","setPagination","pageNumber","generateNewMoviesPage","page","discoverMovieLink","newMovieList","newMovieListResult","generateMovies","console","log","results","movie","title","poster_path","genre_ids","release_date","overview","total_pages"],"mappings":"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","sourcesContent":["import Header from \"../modules/Header\";\nimport React, {useState, useContext, useEffect} from 'react';\nimport { MovieContext, UserContext } from \"../App\";\nimport Pagination from \"../modules/Pagination\";\n\nconst imagepath = process.env.REACT_APP_POSTER_PATH\nconst discoverMovie = process.env.REACT_APP_MOVIE_LIST\nconst key = process.env.REACT_APP_API_KEY\n\nconst Movies = () => {\n  // Trying to re-create problem\n  const [movieList, setNewMovieList] = useState([]) // this will contain the movies from API\n\n  const [currentPage, setCurrentPage] = useState(0) // this will be used for pagination later\n  const movies = useContext(MovieContext);\n  const user = useContext(UserContext);\n  const {movieGenre: genres} = user;\n  // const {movieList, setNewMovieList} = movies // commented this for now to re-create problem\n\n  // Added this function to fetch data from API\n  const getMovieList = async() => {\n    const movieListResponse = await fetch(discoverMovie)\n    const jsonMovieList = await movieListResponse.json()\n    setNewMovieList(jsonMovieList)\n  }\n\n  const getGenres = (genreIDs) => {\n    let movieGenre = []\n    genres.map((genre) => {\n      if (genreIDs.includes(genre.id)) movieGenre.push(genre.name)\n    })\n    return movieGenre.join(', ')\n  }\n\n  const setPagination = (pageNumber) => {\n    setCurrentPage(pageNumber)\n    generateNewMoviesPage(pageNumber)\n  }\n\n  const generateNewMoviesPage = async(page) => {\n    let discoverMovieLink = `https://api.themoviedb.org/3/discover/movie?api_key=${key}&language=en-US&sort_by=popularity.desc&page=${page}`\n    const newMovieList = await fetch(discoverMovieLink)\n    const newMovieListResult = await newMovieList.json()\n    setNewMovieList(newMovieListResult)\n  }\n\n  // const generateMovies = movieList.results.map((movie) => {\n  //   return (\n  //     <div key={movie.id} className='movie'>\n  //       <img className='image' alt={movie.title} src={imagepath + movie.poster_path}/>\n  //       <div className='movieContent'>\n  //         <div>{movie.title}</div> \n  //         <div>{getGenres(movie.genre_ids)}</div>\n  //         <div>Release Date: {movie.release_date}</div>\n  //         <div>{movie.overview}</div>\n  //       </div>\n  //     </div>\n  //   )\n  // })\n\n  const generateMovies = () => {\n    console.log(movieList)\n    return (\n      movieList.results.map((movie) => {\n        <div key={movie.id} className='movie'>\n          <img className='image' alt={movie.title} src={imagepath + movie.poster_path}/>\n          <div className='movieContent'>\n            <div>{movie.title}</div> \n            <div>{getGenres(movie.genre_ids)}</div>\n            <div>Release Date: {movie.release_date}</div>\n            <div>{movie.overview}</div>\n          </div>\n        </div>\n      })\n    )\n  } \n\n  useEffect(() => {\n    // From initial load must load movieList from API\n    getMovieList()\n    // setCurrentPage(movieList.page)\n    setCurrentPage(1)\n  }, [])\n\n  return (\n    <div>\n      <Header/>\n      <div>\n        {\n          movieList.results.map((movie) => {\n            <div key={movie.id} className='movie'>\n              <img className='image' alt={movie.title} src={imagepath + movie.poster_path}/>\n              <div className='movieContent'>\n                <div>{movie.title}</div> \n                <div>{getGenres(movie.genre_ids)}</div>\n                <div>Release Date: {movie.release_date}</div>\n                <div>{movie.overview}</div>\n              </div>\n            </div>\n          })\n        }\n      </div>\n      <Pagination currentPage={currentPage} setCurrentPage={setPagination} lastPage={movieList.total_pages}/>\n    </div>\n  )\n}\n\nexport default Movies;"]},"metadata":{},"sourceType":"module"}