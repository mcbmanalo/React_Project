{"ast":null,"code":"var _jsxFileName = \"/home/mcbmanalo/React_Personal_Project/movie-suggestion/src/App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport React, { useState, useEffect } from 'react';\nimport { Switch, Route, useHistory } from 'react-router-dom';\nimport Home from './pages/Home';\nimport Movies from './pages/Movies';\nimport TVSeries from './pages/TVSeries';\nimport Random from './pages/Random';\nimport Header from './modules/Header';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const UserContext = /*#__PURE__*/React.createContext();\nexport const SuggestContext = /*#__PURE__*/React.createContext();\nconst key = process.env.REACT_APP_API_KEY;\nconst movieGenreLink = process.env.REACT_APP_MOVIE_GENRE_URI;\nconst tvGenreLink = process.env.REACT_APP_TV_GENRE_URI;\n\nconst UserProvider = props => {\n  const {\n    children,\n    generateMovieTV,\n    addSelectedGenre,\n    movieGenre,\n    tvGenre,\n    selectedGenres,\n    resetSelectedGenres,\n    isMovie,\n    setMovieOption\n  } = props;\n  return /*#__PURE__*/_jsxDEV(UserContext.Provider, {\n    value: {\n      generateMovieTV,\n      addSelectedGenre,\n      movieGenre,\n      tvGenre,\n      selectedGenres,\n      resetSelectedGenres,\n      isMovie,\n      setMovieOption\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }, this);\n};\n\n_c = UserProvider;\n\nconst SuggestProvider = props => {\n  const {\n    children,\n    suggestedMovie,\n    loading,\n    genres,\n    isMovie\n  } = props;\n  return /*#__PURE__*/_jsxDEV(SuggestContext.Provider, {\n    value: {\n      suggestedMovie,\n      loading,\n      genres,\n      isMovie\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n};\n\n_c2 = SuggestProvider;\n\nconst uniqueArray = Genres => {\n  return [...new Map(Genres.map(item => [item.id, item])).values()];\n};\n\nconst App = () => {\n  _s();\n\n  const [selectedGenres, setSelectedGenres] = useState([]);\n  const [movieGenre, setMovieGenre] = useState([]);\n  const [tvGenre, setTVGenre] = useState([]);\n  const [genres, setGenres] = useState([]);\n  const [isMovie, setIsMovie] = useState([true]);\n  const [suggestedMovie, setSuggestedMovie] = useState({});\n  const [loading, setLoading] = useState(false);\n  const history = useHistory();\n\n  const addSelectedGenres = genre => {\n    if (selectedGenres.includes(genre)) return;\n    let chosenGenre = [...selectedGenres];\n\n    if (isMovie) {\n      movieGenre.map(genreItem => {\n        if (genreItem.name === genre) return chosenGenre.push(genreItem);\n        return null;\n      });\n      setSelectedGenres(chosenGenre);\n      console.log(chosenGenre);\n      return;\n    }\n\n    tvGenre.map(genreItem => {\n      if (genreItem.name === genre) return chosenGenre.push(genreItem);\n      return null;\n    });\n    setSelectedGenres(chosenGenre);\n    console.log(chosenGenre);\n  };\n\n  const resetSelectedGenres = () => {\n    setSelectedGenres([]);\n  };\n\n  const setMovieOption = value => {\n    setIsMovie(value);\n  };\n\n  const getGenres = async () => {\n    const movieResponse = await fetch(movieGenreLink);\n    const tvResponse = await fetch(tvGenreLink);\n    const jsonMovie = await movieResponse.json();\n    const jsonTV = await tvResponse.json();\n    const allGenres = uniqueArray([...jsonMovie.genres, ...jsonTV.genres]);\n    setGenres(allGenres);\n    setMovieGenre(jsonMovie.genres);\n    setTVGenre(jsonTV.genres);\n  };\n\n  const makeDiscoverLink = async (type, includedGenres) => {\n    let linkGenres = includedGenres.join('%2C');\n    let discoverLink = `https://api.themoviedb.org/3/discover/${type}?api_key=${key}&language=en-US&sort_by=popularity.desc&include_adult=true&include_video=false&page=1&with_genres=${linkGenres}`;\n    const discoverResponse = await fetch(discoverLink);\n    const discoverJson = await discoverResponse.json();\n    let max = discoverJson.total_pages + 1;\n    let min = discoverJson.page;\n    let page = Math.floor(Math.random() * (max - min)) + min;\n    let finalLink = `https://api.themoviedb.org/3/discover/${type}?api_key=${key}&language=en-US&sort_by=popularity.desc&include_adult=true&include_video=false&page=${page}&with_genres=${linkGenres}`;\n    const finalResponse = await fetch(finalLink);\n    const finalJson = await finalResponse.json();\n    let movie = finalJson.results[Math.floor(Math.random() * finalJson.results.length)];\n    setLoading(false);\n    setSuggestedMovie(movie);\n  };\n\n  const generateMovieTV = () => {\n    setLoading(true);\n\n    if (isMovie) {\n      const genres = selectedGenres.map(genre => genre.id);\n      makeDiscoverLink('movie', genres);\n      history.push('/suggest');\n      return;\n    }\n\n    const genres = selectedGenres.map(genre => genre.id);\n    makeDiscoverLink('tv', genres);\n    history.push('/suggest');\n  };\n\n  useEffect(() => {\n    getGenres();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(UserProvider, {\n    generateMovieTV: generateMovieTV,\n    addSelectedGenre: addSelectedGenres,\n    selectedGenres: selectedGenres,\n    movieGenre: movieGenre,\n    tvGenre: tvGenre,\n    resetSelectedGenres: resetSelectedGenres,\n    isMovie: isMovie,\n    setMovieOption: setMovieOption,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        resetSelectedGenres: resetSelectedGenres\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Switch, {\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          path: \"/\",\n          component: Home,\n          exact: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/movies\",\n          component: Movies\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/tv-series\",\n          component: TVSeries\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(SuggestProvider, {\n          suggestedMovie: suggestedMovie,\n          loading: loading,\n          genres: genres,\n          isMovie: isMovie,\n          children: /*#__PURE__*/_jsxDEV(Route, {\n            path: \"/suggest\",\n            component: Random\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"TMDb\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"This product uses the TMDB API but is not endorsed or certified by TMDB\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          className: \"TMDB-logo\",\n          alt: \"TMDB logo\",\n          src: \"https://www.themoviedb.org/assets/2/v4/logos/v2/blue_short-8e7b30f73a4020692ccca9c88bafe5dcb6f8a62a4c6bc55cd9ba82bb2cd95f6c.svg\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 127,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"pr1lE3zZ5dPat6XwQlStpQjvH1c=\", false, function () {\n  return [useHistory];\n});\n\n_c3 = App;\nexport default App;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"UserProvider\");\n$RefreshReg$(_c2, \"SuggestProvider\");\n$RefreshReg$(_c3, \"App\");","map":{"version":3,"sources":["/home/mcbmanalo/React_Personal_Project/movie-suggestion/src/App.js"],"names":["React","useState","useEffect","Switch","Route","useHistory","Home","Movies","TVSeries","Random","Header","UserContext","createContext","SuggestContext","key","process","env","REACT_APP_API_KEY","movieGenreLink","REACT_APP_MOVIE_GENRE_URI","tvGenreLink","REACT_APP_TV_GENRE_URI","UserProvider","props","children","generateMovieTV","addSelectedGenre","movieGenre","tvGenre","selectedGenres","resetSelectedGenres","isMovie","setMovieOption","SuggestProvider","suggestedMovie","loading","genres","uniqueArray","Genres","Map","map","item","id","values","App","setSelectedGenres","setMovieGenre","setTVGenre","setGenres","setIsMovie","setSuggestedMovie","setLoading","history","addSelectedGenres","genre","includes","chosenGenre","genreItem","name","push","console","log","value","getGenres","movieResponse","fetch","tvResponse","jsonMovie","json","jsonTV","allGenres","makeDiscoverLink","type","includedGenres","linkGenres","join","discoverLink","discoverResponse","discoverJson","max","total_pages","min","page","Math","floor","random","finalLink","finalResponse","finalJson","movie","results","length"],"mappings":"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","sourcesContent":["import './App.css';\nimport React, { useState, useEffect } from 'react';\nimport { \n  Switch,\n  Route,\n  useHistory\n} from 'react-router-dom';\nimport Home from './pages/Home';\nimport Movies from './pages/Movies';\nimport TVSeries from './pages/TVSeries';\nimport Random from './pages/Random';\nimport Header from './modules/Header';\n\nexport const UserContext = React.createContext();\nexport const SuggestContext = React.createContext();\n\nconst key = process.env.REACT_APP_API_KEY\nconst movieGenreLink = process.env.REACT_APP_MOVIE_GENRE_URI\nconst tvGenreLink = process.env.REACT_APP_TV_GENRE_URI\n\nconst UserProvider = (props) => {\n  const {children, generateMovieTV, addSelectedGenre, movieGenre, tvGenre, selectedGenres, resetSelectedGenres, isMovie, setMovieOption} = props\n  return (\n    <UserContext.Provider value={{generateMovieTV, addSelectedGenre, movieGenre, tvGenre, selectedGenres, resetSelectedGenres, isMovie, setMovieOption}}>\n      {children}\n    </UserContext.Provider>\n  )\n}\n\nconst SuggestProvider = (props) => {\n  const {children, suggestedMovie, loading, genres, isMovie} = props\n  return (\n    <SuggestContext.Provider value={{suggestedMovie, loading, genres, isMovie}}>\n      {children}\n    </SuggestContext.Provider>\n  )\n}\n\nconst uniqueArray = (Genres) => {\n  return [...new Map(Genres.map(item => [item.id, item])).values()]\n}\n\nconst App = () => {\n  const [selectedGenres, setSelectedGenres] = useState([])\n  const [movieGenre, setMovieGenre] = useState([])\n  const [tvGenre, setTVGenre] = useState([])\n  const [genres, setGenres] = useState([])\n  const [isMovie, setIsMovie] = useState([true])\n  const [suggestedMovie, setSuggestedMovie] = useState({})\n  const [loading, setLoading] = useState(false)\n  const history = useHistory();\n\n  const addSelectedGenres = (genre) => {\n    if (selectedGenres.includes(genre)) return\n    let chosenGenre = [...selectedGenres]\n    if (isMovie) {\n      movieGenre.map((genreItem) => {\n        if (genreItem.name === genre) return chosenGenre.push(genreItem)\n        return null\n      })\n      setSelectedGenres(chosenGenre)\n      console.log(chosenGenre)\n      return\n    }\n\n    tvGenre.map((genreItem) => {\n      if (genreItem.name === genre) return chosenGenre.push(genreItem)\n      return null\n    })\n    setSelectedGenres(chosenGenre)\n    console.log(chosenGenre)\n  }\n\n  const resetSelectedGenres = () => {\n    setSelectedGenres([])\n  }\n\n  const setMovieOption = (value) => {\n    setIsMovie(value)\n  }\n\n  const getGenres = async() => {\n    const movieResponse = await fetch(movieGenreLink)\n    const tvResponse = await fetch(tvGenreLink)\n    const jsonMovie = await movieResponse.json()\n    const jsonTV = await tvResponse.json()\n    const allGenres = uniqueArray([...jsonMovie.genres, ...jsonTV.genres])\n    setGenres(allGenres)\n    setMovieGenre(jsonMovie.genres)\n    setTVGenre(jsonTV.genres)\n  }\n\n  const makeDiscoverLink = async(type, includedGenres) => {\n    let linkGenres = includedGenres.join('%2C')\n    let discoverLink = `https://api.themoviedb.org/3/discover/${type}?api_key=${key}&language=en-US&sort_by=popularity.desc&include_adult=true&include_video=false&page=1&with_genres=${linkGenres}`\n    const discoverResponse = await fetch(discoverLink)\n    const discoverJson = await discoverResponse.json()\n    let max = discoverJson.total_pages + 1\n    let min = discoverJson.page\n    let page = (Math.floor(Math.random() * (max - min)) + min)\n    let finalLink = `https://api.themoviedb.org/3/discover/${type}?api_key=${key}&language=en-US&sort_by=popularity.desc&include_adult=true&include_video=false&page=${page}&with_genres=${linkGenres}`\n    const finalResponse = await fetch(finalLink)\n    const finalJson = await finalResponse.json()\n    let movie = finalJson.results[Math.floor(Math.random() * finalJson.results.length)]\n    setLoading(false)\n    setSuggestedMovie(movie)\n  }\n\n  const generateMovieTV = () => {\n    setLoading(true)\n    if(isMovie) {\n      const genres = selectedGenres.map((genre) => genre.id)\n      makeDiscoverLink('movie', genres)\n      history.push('/suggest')\n      return\n    }\n    const genres = selectedGenres.map((genre) => genre.id)\n    makeDiscoverLink('tv', genres)\n    history.push('/suggest')\n  }\n\n  useEffect(() => {\n    getGenres()\n  }, [])\n  \n  return (\n    <UserProvider \n      generateMovieTV={generateMovieTV} \n      addSelectedGenre={addSelectedGenres}\n      selectedGenres={selectedGenres}\n      movieGenre={movieGenre} \n      tvGenre={tvGenre} \n      resetSelectedGenres={resetSelectedGenres}\n      isMovie={isMovie}\n      setMovieOption={setMovieOption}>\n        <div className='App'>\n          <Header resetSelectedGenres={resetSelectedGenres}/>\n          <Switch>\n            <Route path=\"/\" component={Home} exact/>\n            <Route path=\"/movies\" component={Movies}/>\n            <Route path=\"/tv-series\" component={TVSeries}/>\n            <SuggestProvider suggestedMovie={suggestedMovie} loading={loading} genres={genres} isMovie={isMovie}>\n              <Route path=\"/suggest\" component={Random} />\n            </SuggestProvider>\n          </Switch>\n          <div className='TMDb'>\n            <div>\n              This product uses the TMDB API but is not endorsed or certified by TMDB\n            </div>\n            <img className='TMDB-logo' alt='TMDB logo' src='https://www.themoviedb.org/assets/2/v4/logos/v2/blue_short-8e7b30f73a4020692ccca9c88bafe5dcb6f8a62a4c6bc55cd9ba82bb2cd95f6c.svg'/>\n          </div>\n        </div>\n    </UserProvider>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}