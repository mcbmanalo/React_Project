{"ast":null,"code":"var _jsxFileName = \"/home/mcbmanalo/React_Personal_Project/movie-suggestion/src/pages/Movies.js\",\n    _s = $RefreshSig$();\n\nimport Header from \"../modules/Header\";\nimport React, { useState, useContext, useEffect } from 'react';\nimport { MovieContext, UserContext } from \"../App\";\nimport Pagination from \"../modules/Pagination\";\nimport Loading from \"../modules/Loading\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst imagepath = process.env.REACT_APP_POSTER_PATH;\nconst discoverMovie = process.env.REACT_APP_MOVIE_LIST;\nconst key = process.env.REACT_APP_API_KEY;\n\nconst Movies = () => {\n  _s();\n\n  // Trying to re-create problem\n  const [movieList, setNewMovieList] = useState([]); // this will contain the movies from API\n\n  const [loading, setLoading] = useState(false);\n  const [currentPage, setCurrentPage] = useState(0); // this will be used for pagination later\n\n  const movies = useContext(MovieContext);\n  const user = useContext(UserContext);\n  const {\n    movieGenre: genres\n  } = user; // const {movieList, setNewMovieList} = movies // commented this for now to re-create problem\n  // Added this function to fetch data from API\n\n  const getMovieList = async () => {\n    const movieListResponse = await fetch(discoverMovie);\n    const jsonMovieList = await movieListResponse.json();\n    setNewMovieList(jsonMovieList.results);\n    setCurrentPage(jsonMovieList.page);\n    setLoading(false);\n  };\n\n  const getGenres = genreIDs => {\n    let movieGenre = [];\n    genres.map(genre => {\n      if (genreIDs.includes(genre.id)) movieGenre.push(genre.name);\n    });\n    return movieGenre.join(', ');\n  };\n\n  const setPagination = pageNumber => {\n    setCurrentPage(pageNumber);\n    generateNewMoviesPage(pageNumber);\n  };\n\n  const generateNewMoviesPage = async page => {\n    let discoverMovieLink = `https://api.themoviedb.org/3/discover/movie?api_key=${key}&language=en-US&sort_by=popularity.desc&page=${page}`;\n    const newMovieList = await fetch(discoverMovieLink);\n    const newMovieListResult = await newMovieList.json();\n    setNewMovieList(newMovieListResult);\n  }; // const generateMovies = movieList.results.map((movie) => {\n  //   return (\n  //     <div key={movie.id} className='movie'>\n  //       <img className='image' alt={movie.title} src={imagepath + movie.poster_path}/>\n  //       <div className='movieContent'>\n  //         <div>{movie.title}</div> \n  //         <div>{getGenres(movie.genre_ids)}</div>\n  //         <div>Release Date: {movie.release_date}</div>\n  //         <div>{movie.overview}</div>\n  //       </div>\n  //     </div>\n  //   )\n  // })\n\n\n  const generateMovies = () => {\n    if (movieList.length > 0) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: movieList.map(movie => {\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"movie\",\n              children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                className: \"image\",\n                alt: movie.title,\n                src: imagepath + movie.poster_path\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 74,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"movieContent\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  children: movie.title\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 76,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  children: getGenres(movie.genre_ids)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 77,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  children: [\"Release Date: \", movie.release_date]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 78,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  children: movie.overview\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 79,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 75,\n                columnNumber: 19\n              }, this)]\n            }, movie.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 73,\n              columnNumber: 17\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Pagination, {\n          currentPage: currentPage,\n          setCurrentPage: setPagination,\n          lastPage: movieList.total_pages\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this);\n    }\n  }; // const isMovieList = () => {\n  //   if (movieList.length > 0) {\n  //     setLoading(false)\n  //     return false\n  //   }\n  //   return true\n  // }\n\n\n  useEffect(() => {\n    // From initial load must load movieList from API\n    setLoading(true);\n    getMovieList(); // setCurrentPage(1)\n  }, []); //   useEffect(() => {\n  //     isMovieList()\n  //  }, [movieList]);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this), loading ? /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: generateMovies()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Pagination, {\n        currentPage: currentPage,\n        setCurrentPage: setPagination,\n        lastPage: movieList.total_pages\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Movies, \"YCm4qah43/paV4UzimNel3cy4LA=\");\n\n_c = Movies;\nexport default Movies;\n\nvar _c;\n\n$RefreshReg$(_c, \"Movies\");","map":{"version":3,"sources":["/home/mcbmanalo/React_Personal_Project/movie-suggestion/src/pages/Movies.js"],"names":["Header","React","useState","useContext","useEffect","MovieContext","UserContext","Pagination","Loading","imagepath","process","env","REACT_APP_POSTER_PATH","discoverMovie","REACT_APP_MOVIE_LIST","key","REACT_APP_API_KEY","Movies","movieList","setNewMovieList","loading","setLoading","currentPage","setCurrentPage","movies","user","movieGenre","genres","getMovieList","movieListResponse","fetch","jsonMovieList","json","results","page","getGenres","genreIDs","map","genre","includes","id","push","name","join","setPagination","pageNumber","generateNewMoviesPage","discoverMovieLink","newMovieList","newMovieListResult","generateMovies","length","movie","title","poster_path","genre_ids","release_date","overview","total_pages"],"mappings":"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","sourcesContent":["import Header from \"../modules/Header\";\nimport React, {useState, useContext, useEffect} from 'react';\nimport { MovieContext, UserContext } from \"../App\";\nimport Pagination from \"../modules/Pagination\";\nimport Loading from \"../modules/Loading\";\n\nconst imagepath = process.env.REACT_APP_POSTER_PATH\nconst discoverMovie = process.env.REACT_APP_MOVIE_LIST\nconst key = process.env.REACT_APP_API_KEY\n\nconst Movies = () => {\n  // Trying to re-create problem\n  const [movieList, setNewMovieList] = useState([]) // this will contain the movies from API\n  const [loading, setLoading] = useState(false)\n\n  const [currentPage, setCurrentPage] = useState(0) // this will be used for pagination later\n  const movies = useContext(MovieContext);\n  const user = useContext(UserContext);\n  const {movieGenre: genres} = user;\n  // const {movieList, setNewMovieList} = movies // commented this for now to re-create problem\n\n  // Added this function to fetch data from API\n  const getMovieList = async() => {\n    const movieListResponse = await fetch(discoverMovie)\n    const jsonMovieList = await movieListResponse.json()\n    setNewMovieList(jsonMovieList.results)\n    setCurrentPage(jsonMovieList.page)\n    setLoading(false)\n  }\n\n  const getGenres = (genreIDs) => {\n    let movieGenre = []\n    genres.map((genre) => {\n      if (genreIDs.includes(genre.id)) movieGenre.push(genre.name)\n    })\n    return movieGenre.join(', ')\n  }\n\n  const setPagination = (pageNumber) => {\n    setCurrentPage(pageNumber)\n    generateNewMoviesPage(pageNumber)\n  }\n\n  const generateNewMoviesPage = async(page) => {\n    let discoverMovieLink = `https://api.themoviedb.org/3/discover/movie?api_key=${key}&language=en-US&sort_by=popularity.desc&page=${page}`\n    const newMovieList = await fetch(discoverMovieLink)\n    const newMovieListResult = await newMovieList.json()\n    setNewMovieList(newMovieListResult)\n  }\n\n  // const generateMovies = movieList.results.map((movie) => {\n  //   return (\n  //     <div key={movie.id} className='movie'>\n  //       <img className='image' alt={movie.title} src={imagepath + movie.poster_path}/>\n  //       <div className='movieContent'>\n  //         <div>{movie.title}</div> \n  //         <div>{getGenres(movie.genre_ids)}</div>\n  //         <div>Release Date: {movie.release_date}</div>\n  //         <div>{movie.overview}</div>\n  //       </div>\n  //     </div>\n  //   )\n  // })\n\n  const generateMovies = () => {\n    if (movieList.length > 0) {\n      return (\n        <div>\n          <div>\n          {\n            movieList.map((movie) => {\n              return (\n                <div key={movie.id} className='movie'>\n                  <img className='image' alt={movie.title} src={imagepath + movie.poster_path}/>\n                  <div className='movieContent'>\n                    <div>{movie.title}</div> \n                    <div>{getGenres(movie.genre_ids)}</div>\n                    <div>Release Date: {movie.release_date}</div>\n                    <div>{movie.overview}</div>\n                  </div>\n                </div>\n              )\n            })\n          }\n          </div>\n          <Pagination currentPage={currentPage} setCurrentPage={setPagination} lastPage={movieList.total_pages}/>\n        </div>\n      )\n    }\n  }\n\n  // const isMovieList = () => {\n  //   if (movieList.length > 0) {\n  //     setLoading(false)\n  //     return false\n  //   }\n  //   return true\n  // }\n\n  useEffect(() => {\n    // From initial load must load movieList from API\n    setLoading(true)\n    getMovieList()\n    // setCurrentPage(1)\n  }, [])\n\n//   useEffect(() => {\n//     isMovieList()\n//  }, [movieList]);\n\n  return (\n    <div>\n      <Header/>\n      {\n        loading ? \n        <Loading/> :\n        <div>\n          <div>\n           {generateMovies()}\n          </div>\n          <Pagination currentPage={currentPage} setCurrentPage={setPagination} lastPage={movieList.total_pages}/>\n        </div>\n      }\n      \n    </div>\n  )\n}\n\nexport default Movies;"]},"metadata":{},"sourceType":"module"}