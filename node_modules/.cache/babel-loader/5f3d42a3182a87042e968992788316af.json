{"ast":null,"code":"import React,{useContext}from'react';import{UserContext}from'../App';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var GenreOptions=function GenreOptions(){var user=useContext(UserContext);var isMovie=user.isMovie,movieGenre=user.movieGenre,tvGenre=user.tvGenre,addSelectedGenre=user.addSelectedGenre,resetSelectedGenres=user.resetSelectedGenres,setMovieOption=user.setMovieOption;var generateMovieGenres=movieGenre.map(function(genre){var key=\"\".concat(genre.name,\"-\").concat(genre.id);return/*#__PURE__*/_jsx(\"div\",{className:\"genreButton\",onClick:function onClick(event){return addSelectedGenre(event.target.textContent);},children:genre.name},key);});var generateTVGenres=tvGenre.map(function(genre){var key=\"\".concat(genre.name,\"-\").concat(genre.id);return/*#__PURE__*/_jsx(\"div\",{className:\"genreButton\",onClick:function onClick(event){return addSelectedGenre(event.target.textContent);},children:genre.name},key);});var setMovieGenre=function setMovieGenre(){if(!isMovie)resetSelectedGenres();setMovieOption(true);};var setTVGenre=function setTVGenre(){if(isMovie)resetSelectedGenres();setMovieOption(false);};return/*#__PURE__*/_jsxs(\"div\",{className:\"App-genres\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"App-options\",children:[/*#__PURE__*/_jsx(\"div\",{className:isMovie?'selected':'showType',onClick:setMovieGenre,children:\"Movie Genres\"}),/*#__PURE__*/_jsx(\"div\",{className:isMovie?'showType':'selected',onClick:setTVGenre,children:\"TV Series Genres\"})]}),/*#__PURE__*/_jsx(\"div\",{className:\"quotes\",children:\"Choose a genre that you would like to base the generator\"}),user.isMovie?/*#__PURE__*/_jsx(\"div\",{className:\"Genres\",children:generateMovieGenres}):/*#__PURE__*/_jsx(\"div\",{className:\"Genres\",children:generateTVGenres})]});};export default GenreOptions;","map":{"version":3,"sources":["/home/mcbmanalo/React_Personal_Project/src/modules/GenreOptions.js"],"names":["React","useContext","UserContext","GenreOptions","user","isMovie","movieGenre","tvGenre","addSelectedGenre","resetSelectedGenres","setMovieOption","generateMovieGenres","map","genre","key","name","id","event","target","textContent","generateTVGenres","setMovieGenre","setTVGenre"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,EAAeC,UAAf,KAAgC,OAAhC,CACA,OAASC,WAAT,KAA4B,QAA5B,C,wFAEA,GAAMC,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,EAAM,CACzB,GAAMC,CAAAA,IAAI,CAAGH,UAAU,CAACC,WAAD,CAAvB,CACA,GAAOG,CAAAA,OAAP,CAA8FD,IAA9F,CAAOC,OAAP,CAAgBC,UAAhB,CAA8FF,IAA9F,CAAgBE,UAAhB,CAA4BC,OAA5B,CAA8FH,IAA9F,CAA4BG,OAA5B,CAAqCC,gBAArC,CAA8FJ,IAA9F,CAAqCI,gBAArC,CAAuDC,mBAAvD,CAA8FL,IAA9F,CAAuDK,mBAAvD,CAA4EC,cAA5E,CAA8FN,IAA9F,CAA4EM,cAA5E,CAEA,GAAMC,CAAAA,mBAAmB,CAAGL,UAAU,CAACM,GAAX,CAAe,SAACC,KAAD,CAAW,CACpD,GAAMC,CAAAA,GAAG,WAAMD,KAAK,CAACE,IAAZ,aAAoBF,KAAK,CAACG,EAA1B,CAAT,CACA,mBAAO,YAAK,SAAS,CAAC,aAAf,CAA6B,OAAO,CAAE,iBAACC,KAAD,QAAWT,CAAAA,gBAAgB,CAACS,KAAK,CAACC,MAAN,CAAaC,WAAd,CAA3B,EAAtC,UAAwGN,KAAK,CAACE,IAA9G,EAAkGD,GAAlG,CAAP,CACD,CAH2B,CAA5B,CAKA,GAAMM,CAAAA,gBAAgB,CAAGb,OAAO,CAACK,GAAR,CAAY,SAACC,KAAD,CAAW,CAC9C,GAAMC,CAAAA,GAAG,WAAMD,KAAK,CAACE,IAAZ,aAAoBF,KAAK,CAACG,EAA1B,CAAT,CACA,mBAAO,YAAK,SAAS,CAAC,aAAf,CAA6B,OAAO,CAAE,iBAACC,KAAD,QAAWT,CAAAA,gBAAgB,CAACS,KAAK,CAACC,MAAN,CAAaC,WAAd,CAA3B,EAAtC,UAAwGN,KAAK,CAACE,IAA9G,EAAkGD,GAAlG,CAAP,CACD,CAHwB,CAAzB,CAKA,GAAMO,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,EAAM,CAC1B,GAAI,CAAChB,OAAL,CAAcI,mBAAmB,GACjCC,cAAc,CAAC,IAAD,CAAd,CACD,CAHD,CAKA,GAAMY,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,EAAM,CACvB,GAAIjB,OAAJ,CAAaI,mBAAmB,GAChCC,cAAc,CAAC,KAAD,CAAd,CACD,CAHD,CAKA,mBACE,aAAK,SAAS,CAAC,YAAf,wBACE,aAAK,SAAS,CAAC,aAAf,wBACE,YAAK,SAAS,CAAEL,OAAO,CAAG,UAAH,CAAgB,UAAvC,CAAmD,OAAO,CAAEgB,aAA5D,0BADF,cAIE,YAAK,SAAS,CAAEhB,OAAO,CAAG,UAAH,CAAgB,UAAvC,CAAoD,OAAO,CAAEiB,UAA7D,8BAJF,GADF,cAUE,YAAK,SAAS,CAAC,QAAf,sEAVF,CAWIlB,IAAI,CAACC,OAAL,cACA,YAAK,SAAS,CAAC,QAAf,UAAyBM,mBAAzB,EADA,cAEA,YAAK,SAAS,CAAC,QAAf,UAAyBS,gBAAzB,EAbJ,GADF,CAkBD,CA1CD,CA4CA,cAAejB,CAAAA,YAAf","sourcesContent":["import React, {useContext} from 'react';\nimport { UserContext } from '../App'\n\nconst GenreOptions = () => {\n  const user = useContext(UserContext);\n  const {isMovie, movieGenre, tvGenre, addSelectedGenre, resetSelectedGenres, setMovieOption} = user\n\n  const generateMovieGenres = movieGenre.map((genre) => {\n    const key = `${genre.name}-${genre.id}`\n    return <div className='genreButton' onClick={(event) => addSelectedGenre(event.target.textContent)} key={key}>{genre.name}</div>\n  })\n\n  const generateTVGenres = tvGenre.map((genre) => {\n    const key = `${genre.name}-${genre.id}`\n    return <div className='genreButton' onClick={(event) => addSelectedGenre(event.target.textContent)} key={key}>{genre.name}</div>\n  })\n\n  const setMovieGenre = () => {\n    if (!isMovie) resetSelectedGenres()\n    setMovieOption(true)\n  }\n\n  const setTVGenre = () => {\n    if (isMovie) resetSelectedGenres()\n    setMovieOption(false)\n  }\n\n  return (\n    <div className='App-genres'>\n      <div className='App-options'>\n        <div className={isMovie ? 'selected' : 'showType'} onClick={setMovieGenre}>\n          Movie Genres\n        </div>\n        <div className={isMovie ? 'showType' : 'selected'}  onClick={setTVGenre}>\n          TV Series Genres\n        </div>\n      </div>\n\n      <div className='quotes'>Choose a genre that you would like to base the generator</div>\n      { user.isMovie ? \n        <div className='Genres'>{generateMovieGenres}</div> : \n        <div className='Genres'>{generateTVGenres}</div>\n      }\n    </div>\n  )\n}\n\nexport default GenreOptions;"]},"metadata":{},"sourceType":"module"}