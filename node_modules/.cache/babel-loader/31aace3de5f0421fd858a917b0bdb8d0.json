{"ast":null,"code":"var _jsxFileName = \"/home/mcbmanalo/React_Personal_Project/movie-suggestion/src/pages/Movies.js\",\n    _s = $RefreshSig$();\n\nimport Header from \"../modules/Header\";\nimport React, { useState, useContext, useEffect } from 'react';\nimport { MovieContext, UserContext } from \"../App\";\nimport Pagination from \"../modules/Pagination\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const MoviePaginationContext = /*#__PURE__*/React.createContext();\nconst imagepath = process.env.REACT_APP_POSTER_PATH;\n\nconst MoviePaginationProvider = props => {\n  const {\n    children,\n    currentPage,\n    setCurrentPage,\n    lastPage\n  } = props;\n  return /*#__PURE__*/_jsxDEV(MoviePaginationContext.Provider, {\n    value: {\n      currentPage,\n      setCurrentPage,\n      lastPage\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 5\n  }, this);\n};\n\n_c = MoviePaginationProvider;\n\nconst Movies = () => {\n  _s();\n\n  const [currentPage, setCurrentPage] = useState(0); // this will be used for pagination later\n\n  const movies = useContext(MovieContext);\n  const user = useContext(UserContext);\n  const {\n    movieGenre: genres\n  } = user;\n  const {\n    movieList\n  } = movies;\n\n  const getGenres = genreIDs => {\n    let movieGenre = [];\n    genres.map(genre => {\n      if (genreIDs.includes(genre.id)) movieGenre.push(genre.name);\n    });\n    return movieGenre.join(', ');\n  };\n\n  const setPagination = pageNumber => {\n    setCurrentPage(pageNumber);\n  };\n\n  const generateNewMoviesPage = async page => {\n    let discoverMovieLink = `https://api.themoviedb.org/3/discover/movie?api_key=${key}&language=en-US&sort_by=popularity.desc&page=${page}`;\n    const newMovieList = await fetch(discoverMovieLink);\n    const newMovieListResult = await discoverMovieLink.json();\n  };\n\n  const generateMovies = movieList.results.map(movie => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"movie\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        className: \"image\",\n        alt: movie.title,\n        src: imagepath + movie.poster_path\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"movieContent\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: movie.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: getGenres(movie.genre_ids)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"Release Date: \", movie.release_date]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: movie.overview\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this)]\n    }, movie.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this);\n  });\n  useEffect(() => {\n    console.log(movieList);\n    setCurrentPage(movieList.page);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: generateMovies\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MoviePaginationProvider, {\n      currentPage: currentPage,\n      setCurrentPage: setPagination,\n      lastPage: movieList.total_pages,\n      children: /*#__PURE__*/_jsxDEV(Pagination, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Movies, \"cor9EPPq32FffhR+UER2Rr636mQ=\");\n\n_c2 = Movies;\nexport default Movies;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"MoviePaginationProvider\");\n$RefreshReg$(_c2, \"Movies\");","map":{"version":3,"sources":["/home/mcbmanalo/React_Personal_Project/movie-suggestion/src/pages/Movies.js"],"names":["Header","React","useState","useContext","useEffect","MovieContext","UserContext","Pagination","MoviePaginationContext","createContext","imagepath","process","env","REACT_APP_POSTER_PATH","MoviePaginationProvider","props","children","currentPage","setCurrentPage","lastPage","Movies","movies","user","movieGenre","genres","movieList","getGenres","genreIDs","map","genre","includes","id","push","name","join","setPagination","pageNumber","generateNewMoviesPage","page","discoverMovieLink","key","newMovieList","fetch","newMovieListResult","json","generateMovies","results","movie","title","poster_path","genre_ids","release_date","overview","console","log","total_pages"],"mappings":"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","sourcesContent":["import Header from \"../modules/Header\";\nimport React, {useState, useContext, useEffect} from 'react';\nimport { MovieContext, UserContext } from \"../App\";\nimport Pagination from \"../modules/Pagination\";\n\nexport const MoviePaginationContext = React.createContext();\n\nconst imagepath = process.env.REACT_APP_POSTER_PATH\n\nconst MoviePaginationProvider = (props) => {\n  const {children, currentPage, setCurrentPage, lastPage} = props\n  return (\n    <MoviePaginationContext.Provider value={{currentPage, setCurrentPage, lastPage}}>\n      {children}\n    </MoviePaginationContext.Provider>\n  )\n}\n\nconst Movies = () => {\n  const [currentPage, setCurrentPage] = useState(0) // this will be used for pagination later\n  const movies = useContext(MovieContext);\n  const user = useContext(UserContext);\n  const {movieGenre: genres} = user;\n  const {movieList} = movies\n\n  const getGenres = (genreIDs) => {\n    let movieGenre = []\n    genres.map((genre) => {\n      if (genreIDs.includes(genre.id)) movieGenre.push(genre.name)\n    })\n    return movieGenre.join(', ')\n  }\n\n  const setPagination = (pageNumber) => {\n    setCurrentPage(pageNumber)\n  }\n\n  const generateNewMoviesPage = async(page) => {\n    let discoverMovieLink = `https://api.themoviedb.org/3/discover/movie?api_key=${key}&language=en-US&sort_by=popularity.desc&page=${page}`\n    const newMovieList = await fetch(discoverMovieLink)\n    const newMovieListResult = await discoverMovieLink.json()\n  }\n\n  const generateMovies = movieList.results.map((movie) => {\n    return (\n      <div key={movie.id} className='movie'>\n        <img className='image' alt={movie.title} src={imagepath + movie.poster_path}/>\n        <div className='movieContent'>\n          <div>{movie.title}</div> \n          <div>{getGenres(movie.genre_ids)}</div>\n          <div>Release Date: {movie.release_date}</div>\n          <div>{movie.overview}</div>\n        </div>\n      </div>\n    )\n  })\n\n  useEffect(() => {\n    console.log(movieList)\n    setCurrentPage(movieList.page)\n  }, [])\n\n  return (\n    <div>\n      <Header/>\n      <div>\n        {generateMovies}\n      </div>\n      <MoviePaginationProvider currentPage={currentPage} setCurrentPage={setPagination} lastPage={movieList.total_pages}>\n        <Pagination/>\n      </MoviePaginationProvider>\n    </div>\n  )\n}\n\nexport default Movies;"]},"metadata":{},"sourceType":"module"}