{"version":3,"sources":["modules/GenreOptions.js","modules/Generator.js","pages/Home.js","modules/Pagination.js","modules/Loading.js","pages/Movies.js","pages/TVSeries.js","pages/Random.js","modules/Header.js","App.js","index.js"],"names":["GenreOptions","user","useContext","UserContext","isMovie","movieGenre","tvGenre","addSelectedGenre","resetSelectedGenres","setMovieOption","generateMovieGenres","map","genre","key","name","id","className","onClick","event","target","textContent","generateTVGenres","Generator","selectedGenres","generateMovieTV","isMaxGenre","useState","isSelectedGenreEmpty","setIsSelectedGenre","useEffect","length","userSelectedGenres","join","setSelectedGenres","Home","Pagination","props","currentPage","setCurrentPage","lastPage","actualCurrentPage","setActualCurrentPage","type","value","onChange","newPageNumber","pageNumber","parseInt","checkSetActuaCurrentPage","onKeyDown","keyCode","Loading","Movies","movieList","setNewMovieList","loading","setLoading","setLastPage","genres","getMovieList","a","fetch","process","movieListResponse","json","jsonMovieList","results","page","total_pages","getGenres","genreIDs","includes","push","generateNewMoviesPage","discoverMovieLink","newMovieList","newMovieListResult","movie","alt","title","src","poster_path","genre_ids","release_date","overview","generateMovies","TVSeries","tvList","setNewTVList","getTVList","tvListResponse","jsonTVList","generateNewTVPage","discoverTVLink","newTVList","newTVListResult","series","first_air_date","generateTVShows","Random","suggested","SuggestContext","suggestedMovie","undefined","Header","history","useHistory","React","createContext","UserProvider","children","Provider","SuggestProvider","App","setMovieGenre","setTVGenre","setGenres","setIsMovie","setSuggestedMovie","setIsMaxGenre","movieResponse","tvResponse","jsonMovie","jsonTV","Genres","allGenres","Map","item","values","makeDiscoverLink","includedGenres","linkGenres","discoverLink","discoverResponse","discoverJson","max","min","Math","floor","random","finalLink","finalResponse","finalJson","nameOfSelectedGenres","removeItem","findIndex","newSelectedGenres","splice","chosenGenre","genreItem","path","component","exact","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.697685c9.chunk.js","sourcesContent":["import React, {useContext} from 'react';\nimport { UserContext } from '../App'\n\nconst GenreOptions = () => {\n  const user = useContext(UserContext);\n  const {isMovie, movieGenre, tvGenre, addSelectedGenre, resetSelectedGenres, setMovieOption} = user\n\n  const generateMovieGenres = movieGenre.map((genre) => {\n    const key = `${genre.name}-${genre.id}`\n    return <div className='genreButton' onClick={(event) => addSelectedGenre(event.target.textContent)} key={key}>{genre.name}</div>\n  })\n\n  const generateTVGenres = tvGenre.map((genre) => {\n    const key = `${genre.name}-${genre.id}`\n    return <div className='genreButton' onClick={(event) => addSelectedGenre(event.target.textContent)} key={key}>{genre.name}</div>\n  })\n\n  const setMovieGenre = () => {\n    if (!isMovie) resetSelectedGenres()\n    setMovieOption(true)\n  }\n\n  const setTVGenre = () => {\n    if (isMovie) resetSelectedGenres()\n    setMovieOption(false)\n  }\n\n  return (\n    <div className='App-genres'>\n      <div className='App-options'>\n        <div className={isMovie ? 'selected' : 'showType'} onClick={setMovieGenre}>\n          Movie Genres\n        </div>\n        <div className={isMovie ? 'showType' : 'selected'}  onClick={setTVGenre}>\n          TV Series Genres\n        </div>\n      </div>\n\n      <div className='quotes'>Choose a genre that you would like to base the generator</div>\n      { user.isMovie ? \n        <div className='Genres'>{generateMovieGenres}</div> : \n        <div className='Genres'>{generateTVGenres}</div>\n      }\n    </div>\n  )\n}\n\nexport default GenreOptions;","import React, {useContext, useState, useEffect} from 'react';\nimport { UserContext } from '../App'\n\nconst Generator = () => {\n  const user = useContext(UserContext);\n  const {selectedGenres, generateMovieTV, isMaxGenre} = user\n  const [isSelectedGenreEmpty, setIsSelectedGenre] = useState(true)\n\n  const setSelectedGenres = () => {\n    const userSelectedGenres = selectedGenres.map(genre => genre.name)\n    return (\n      <div className='selectedGenres'>Selected Genres: {userSelectedGenres.join(', ')}</div>\n    )\n  }\n\n  const checkSelectedGenre = () => {\n    if (selectedGenres.length > 0) return setIsSelectedGenre(false)\n    return setIsSelectedGenre(true)\n  }\n\n  useEffect(() => {\n    checkSelectedGenre()\n  }, [selectedGenres])\n\n  return (\n    <div className='App-generator'>\n      <div className='quotes' onClick={generateMovieTV}>\n        Surprise yourself!\n        {isSelectedGenreEmpty ? <div></div> : setSelectedGenres()}\n        { isMaxGenre ? <div className='error'>Reached max number of allowable genres. (max 3)</div> :\n          <div></div>\n        }\n      </div>\n    </div>\n  )\n}\n\nexport default Generator;","import GenreOptions from '../modules/GenreOptions';\nimport Generator from '../modules/Generator';\n\nconst Home = () => {\n\n  return(\n    <div>\n      <Generator/>\n      <GenreOptions/>\n    </div>\n  )\n}\n\nexport default Home;","import { FaAngleRight, FaAngleLeft } from \"react-icons/fa\";\nimport { useState } from \"react\";\n\nconst Pagination = (props) => {\n  const {currentPage, setCurrentPage, lastPage} = props\n  const [actualCurrentPage, setActualCurrentPage] = useState(currentPage)\n\n  const checkSetActuaCurrentPage = (newPageNumber) => {\n    let pageNumber = parseInt(newPageNumber)\n    if (!(pageNumber <= lastPage && pageNumber > 0)) return\n    setActualCurrentPage(pageNumber)\n  }\n\n  const isEntered = (keyCode) => {\n    if(keyCode === 13) {\n      setCurrentPage(actualCurrentPage)\n    }\n  }\n\n  const previousPage = () => {\n    if (currentPage <= 1) return\n    setCurrentPage(currentPage-1)\n  }\n\n  const nextPage = () => {\n    if (currentPage === lastPage) return\n    setCurrentPage(currentPage + 1)\n  }\n\n  return (\n    <div className='pagination'>\n      <FaAngleLeft onClick={previousPage}/>\n      <input\n        className='page-number'\n        type='number' \n        value={actualCurrentPage} \n        onChange={(event) => checkSetActuaCurrentPage(event.target.value)}\n        onKeyDown={(event) => isEntered(event.keyCode)}></input>\n      <div>of</div>\n      <div>{lastPage}</div>\n      <FaAngleRight onClick={nextPage}/>\n    </div>\n  )\n}\n\nexport default Pagination;","import { FaSpinner } from \"react-icons/fa\"\n\nconst Loading = () => {\n  return (\n    <div className='loading'>\n      <FaSpinner className='loading-img'/>\n      Loading\n    </div>\n  )\n}\n\nexport default Loading;","import React, {useState, useContext, useEffect} from 'react';\nimport { UserContext } from \"../App\";\nimport Pagination from \"../modules/Pagination\";\nimport Loading from \"../modules/Loading\";\n\nconst imagepath = process.env.REACT_APP_POSTER_PATH\nconst discoverMovie = process.env.REACT_APP_MOVIE_LIST\nconst key = process.env.REACT_APP_API_KEY\n\nconst Movies = () => {\n  const [movieList, setNewMovieList] = useState([])\n  const [loading, setLoading] = useState(false)\n  const [currentPage, setCurrentPage] = useState(1)\n  const [lastPage, setLastPage] = useState(1)\n  const user = useContext(UserContext);\n  const {movieGenre: genres} = user;\n\n  const getMovieList = async() => {\n    const movieListResponse = await fetch(discoverMovie)\n    const jsonMovieList = await movieListResponse.json()\n    setNewMovieList(jsonMovieList.results)\n    setCurrentPage(jsonMovieList.page)\n    setLastPage(jsonMovieList.total_pages)\n    setLoading(false)\n  }\n\n  const getGenres = (genreIDs) => {\n    let movieGenre = []\n    genres.map((genre) => {\n      if (genreIDs.includes(genre.id)) movieGenre.push(genre.name)\n    })\n    return movieGenre.join(', ')\n  }\n\n  const setPagination = (pageNumber) => {\n    setLoading(true)\n    setCurrentPage(pageNumber)\n    generateNewMoviesPage(pageNumber)\n  }\n\n  const generateNewMoviesPage = async(page) => {\n    let discoverMovieLink = `https://api.themoviedb.org/3/discover/movie?api_key=${key}&language=en-US&sort_by=popularity.desc&page=${page}`\n    const newMovieList = await fetch(discoverMovieLink)\n    const newMovieListResult = await newMovieList.json()\n    setNewMovieList(newMovieListResult.results)\n    setLoading(false)\n  }\n\n  const generateMovies = () => {\n    if (movieList.length > 0) {\n      return (\n        movieList.map((movie) => {\n          return (\n            <div key={movie.id} className='movie'>\n              <img className='image' alt={movie.title} src={imagepath + movie.poster_path}/>\n              <div className='movieContent'>\n                <div>{movie.title}</div> \n                <div>{getGenres(movie.genre_ids)}</div>\n                <div>Release Date: {movie.release_date}</div>\n                <div>{movie.overview}</div>\n              </div>\n            </div>\n          )\n        })\n      )\n    }\n  }\n\n  useEffect(() => {\n    setLoading(true)\n    getMovieList()\n  }, [])\n\n  return (\n    <div>\n      {\n        loading ? \n        <Loading/> :\n        <div>\n          <div>\n           {generateMovies()}\n          </div>\n          <Pagination currentPage={currentPage} setCurrentPage={setPagination} lastPage={lastPage}/>\n        </div>\n      }\n    </div>\n  )\n}\n\nexport default Movies;","import React, {useState, useContext, useEffect} from 'react';\nimport { UserContext } from \"../App\";\nimport Pagination from \"../modules/Pagination\";\nimport Loading from \"../modules/Loading\";\n\nconst imagepath = process.env.REACT_APP_POSTER_PATH\nconst discoverTV = process.env.REACT_APP_TV_LIST \nconst key = process.env.REACT_APP_API_KEY\n\nconst TVSeries = () => {\n  const [tvList, setNewTVList] = useState([])\n  const [loading, setLoading] = useState(false)\n  const [currentPage, setCurrentPage] = useState(1)\n  const [lastPage, setLastPage] = useState(1)\n  const user = useContext(UserContext);\n  const {tvGenre:genres} = user;\n\n  const getTVList = async() => {\n    const tvListResponse = await fetch(discoverTV)\n    const jsonTVList = await tvListResponse.json()\n    setNewTVList(jsonTVList.results)\n    setCurrentPage(jsonTVList.page)\n    setLastPage(jsonTVList.total_pages)\n    setLoading(false)\n  }\n\n  const getGenres = (genreIDs) => {\n    let movieGenre = []\n    genres.map((genre) => {\n      if (genreIDs.includes(genre.id)) movieGenre.push(genre.name)\n    })\n    return movieGenre.join(', ')\n  }\n\n  const setPagination = (pageNumber) => {\n    setLoading(true)\n    setCurrentPage(pageNumber)\n    generateNewTVPage(pageNumber)\n  }\n\n  const generateNewTVPage = async(page) => {\n    let discoverTVLink = `https://api.themoviedb.org/3/discover/tv?api_key=${key}&language=en-US&sort_by=popularity.desc&page=${page}`\n    const newTVList = await fetch(discoverTVLink)\n    const newTVListResult = await newTVList.json()\n    setNewTVList(newTVListResult.results)\n    setLoading(false)\n  }\n\n  const generateTVShows = () => {\n    if (tvList.length > 0) {\n      return (\n        tvList.map((series) => {\n          return (\n            <div key={series.id} className='movie'>\n              <img className='image' alt={series.name} src={imagepath + series.poster_path}/>\n              <div className='movieContent'>\n                <div>{series.name}</div> \n                <div>{getGenres(series.genre_ids)}</div>\n                <div>First Air Date: {series.first_air_date}</div>\n                <div>{series.overview}</div>\n              </div>\n            </div>\n          )\n        })\n      )\n    }\n  }\n\n  useEffect(() => {\n    setLoading(true)\n    getTVList()\n  }, [])\n\n  return (\n    <div className='App'>\n      {\n        loading ? \n        <Loading/> :\n        <div>\n          <div>\n            {generateTVShows()}\n          </div>\n          <Pagination currentPage={currentPage} setCurrentPage={setPagination} lastPage={lastPage}/>\n        </div>\n      }\n    </div>\n  )\n}\n\nexport default TVSeries;","import { useContext } from \"react\"\nimport { SuggestContext } from \"../App\"\nimport Loading from \"../modules/Loading\"\n\nconst imagepath = process.env.REACT_APP_POSTER_PATH\n\nconst Random = () => {\n  const suggested = useContext(SuggestContext)\n  const {suggestedMovie, genres, loading, isMovie} = suggested\n\n  const getGenres = (genreIDs) => {\n    if (loading || genreIDs === undefined) return ''\n    let movieGenre = []\n    genres.map((genre) => {\n      if (genreIDs.includes(genre.id)) movieGenre.push(genre.name)\n    })\n    return movieGenre.join(', ')\n  }\n  \n  return (\n    <div>\n      {loading ? \n        <Loading/> \n        :\n        <div className='movie'>\n          <img className='image' alt={isMovie? suggestedMovie.title : suggestedMovie.name} src={imagepath + suggestedMovie.poster_path}/>\n          <div className='movieContent'>\n            {\n              isMovie ?\n              <div>{suggestedMovie.title}</div> :\n              <div>{suggestedMovie.name}</div>\n            }\n            <div>{getGenres(suggestedMovie.genre_ids)}</div>\n            {\n              isMovie ?\n                <div>Release Date: {suggestedMovie.release_date}</div> :\n                <div>First Air Date: {suggestedMovie.first_air_date}</div>\n            }\n            <div>{suggestedMovie.overview}</div>\n          </div>\n        </div>\n      }\n    </div>\n  )\n}\n\nexport default Random;","import { \n  useHistory,\n} from 'react-router-dom';\nimport { FaPlayCircle } from 'react-icons/fa'\n\n\nconst Header = (props) => {\n  const {resetSelectedGenres} = props\n  const history = useHistory();\n\n  const goToHome = () => {\n    history.push('/')\n    resetSelectedGenres()\n  }\n\n  \n  const goToMovies = () => {\n    history.push('/movies')\n    resetSelectedGenres()\n  }\n\n  \n  const goToTVSeries = () => {\n    history.push('/tv-series')\n    resetSelectedGenres()\n  }\n\n\n  return (\n    <div className='App-header'>\n      <div className='App-image'>\n        <div>\n          What to\n        </div>\n        <FaPlayCircle/>\n      </div>\n\n      <div className='App-pages'>\n        <div onClick={goToHome}>Home</div>\n        <div onClick={goToMovies}>Movies</div>\n        <div onClick={goToTVSeries}>TV Series</div>\n      </div>\n\n    </div>\n  )\n}\n\nexport default Header;","import './App.css';\nimport React, { useState, useEffect } from 'react';\nimport { \n  Switch,\n  Route,\n  useHistory\n} from 'react-router-dom';\nimport Home from './pages/Home';\nimport Movies from './pages/Movies';\nimport TVSeries from './pages/TVSeries';\nimport Random from './pages/Random';\nimport Header from './modules/Header';\n\nexport const UserContext = React.createContext();\nexport const SuggestContext = React.createContext();\n\nconst key = process.env.REACT_APP_API_KEY\nconst movieGenreLink = process.env.REACT_APP_MOVIE_GENRE_URI\nconst tvGenreLink = process.env.REACT_APP_TV_GENRE_URI\n\nconst UserProvider = (props) => {\n  const {children, generateMovieTV, isMaxGenre, addSelectedGenre, movieGenre, tvGenre, selectedGenres, resetSelectedGenres, isMovie, setMovieOption} = props\n  return (\n    <UserContext.Provider value={{generateMovieTV, isMaxGenre, addSelectedGenre, movieGenre, tvGenre, selectedGenres, resetSelectedGenres, isMovie, setMovieOption}}>\n      {children}\n    </UserContext.Provider>\n  )\n}\n\nconst SuggestProvider = (props) => {\n  const {children, suggestedMovie, loading, genres, isMovie} = props\n  return (\n    <SuggestContext.Provider value={{suggestedMovie, loading, genres, isMovie}}>\n      {children}\n    </SuggestContext.Provider>\n  )\n}\n\nconst uniqueArray = (Genres) => {\n  return [...new Map(Genres.map(item => [item.id, item])).values()]\n}\n\nconst App = () => {\n  const [selectedGenres, setSelectedGenres] = useState([])\n  const [movieGenre, setMovieGenre] = useState([])\n  const [tvGenre, setTVGenre] = useState([])\n  const [genres, setGenres] = useState([])\n  const [isMovie, setIsMovie] = useState([true])\n  const [suggestedMovie, setSuggestedMovie] = useState({})\n  const [loading, setLoading] = useState(false)\n  const [isMaxGenre, setIsMaxGenre] = useState(false)\n  const history = useHistory();\n\n  const addSelectedGenres = (genre) => {\n    const nameOfSelectedGenres = selectedGenres.map(genre => genre.name)\n\n    if (nameOfSelectedGenres.includes(genre)) {\n      let removeItem = selectedGenres.findIndex(genre => genre.name === genre)\n      let newSelectedGenres = [...selectedGenres]\n      newSelectedGenres.splice(removeItem, 1)\n      setSelectedGenres(newSelectedGenres)\n      setIsMaxGenre(false)\n      return\n    }\n\n    if (selectedGenres.length === 3) {\n      setIsMaxGenre(true)\n      return\n    }\n\n    let chosenGenre = [...selectedGenres]\n    if (isMovie) {\n      movieGenre.map((genreItem) => {\n        if (genreItem.name === genre) return chosenGenre.push(genreItem)\n        return null\n      })\n      setSelectedGenres(chosenGenre)\n      return\n    }\n\n    tvGenre.map((genreItem) => {\n      if (genreItem.name === genre) return chosenGenre.push(genreItem)\n      return null\n    })\n    setSelectedGenres(chosenGenre)\n  }\n\n  const resetSelectedGenres = () => {\n    setSelectedGenres([])\n    setIsMovie(true)\n    setIsMaxGenre(false)\n  }\n\n  const setMovieOption = (value) => {\n    setIsMovie(value)\n    setIsMaxGenre(false)\n  }\n\n  const getGenres = async() => {\n    const movieResponse = await fetch(movieGenreLink)\n    const tvResponse = await fetch(tvGenreLink)\n    const jsonMovie = await movieResponse.json()\n    const jsonTV = await tvResponse.json()\n    const allGenres = uniqueArray([...jsonMovie.genres, ...jsonTV.genres])\n    setGenres(allGenres)\n    setMovieGenre(jsonMovie.genres)\n    setTVGenre(jsonTV.genres)\n  }\n\n  const makeDiscoverLink = async(type, includedGenres) => {\n    let linkGenres = includedGenres.join('%2C')\n    let discoverLink = `https://api.themoviedb.org/3/discover/${type}?api_key=${key}&language=en-US&sort_by=popularity.desc&include_adult=true&include_video=false&page=1&with_genres=${linkGenres}`\n    const discoverResponse = await fetch(discoverLink)\n    const discoverJson = await discoverResponse.json()\n    let max = discoverJson.total_pages + 1\n    let min = discoverJson.page\n    let page = (Math.floor(Math.random() * (max - min)) + min)\n    let finalLink = `https://api.themoviedb.org/3/discover/${type}?api_key=${key}&language=en-US&sort_by=popularity.desc&include_adult=true&include_video=false&page=${page}&with_genres=${linkGenres}`\n    const finalResponse = await fetch(finalLink)\n    const finalJson = await finalResponse.json()\n    let movie = finalJson.results[Math.floor(Math.random() * finalJson.results.length)]\n    setLoading(false)\n    setSuggestedMovie(movie)\n  }\n\n  const generateMovieTV = () => {\n    setLoading(true)\n    if(isMovie) {\n      const genres = selectedGenres.map((genre) => genre.id)\n      makeDiscoverLink('movie', genres)\n      history.push('/suggest')\n      return\n    }\n    const genres = selectedGenres.map((genre) => genre.id)\n    makeDiscoverLink('tv', genres)\n    history.push('/suggest')\n  }\n\n  useEffect(() => {\n    getGenres()\n  }, [])\n  \n  return (\n    <UserProvider \n      generateMovieTV={generateMovieTV} \n      addSelectedGenre={addSelectedGenres}\n      selectedGenres={selectedGenres}\n      movieGenre={movieGenre} \n      tvGenre={tvGenre} \n      resetSelectedGenres={resetSelectedGenres}\n      isMovie={isMovie}\n      isMaxGenre={isMaxGenre}\n      setMovieOption={setMovieOption}>\n        <div className='App'>\n          <Header resetSelectedGenres={resetSelectedGenres}/>\n          <Switch>\n            <Route path=\"/\" component={Home} exact/>\n            <Route path=\"/movies\" component={Movies}/>\n            <Route path=\"/tv-series\" component={TVSeries}/>\n            <SuggestProvider suggestedMovie={suggestedMovie} loading={loading} genres={genres} isMovie={isMovie}>\n              <Route path=\"/suggest\" component={Random} />\n            </SuggestProvider>\n          </Switch>\n          <div className='TMDb'>\n            <div>\n              This product uses the TMDB API but is not endorsed or certified by TMDB\n            </div>\n            <img className='TMDB-logo' alt='TMDB logo' src='https://www.themoviedb.org/assets/2/v4/logos/v2/blue_short-8e7b30f73a4020692ccca9c88bafe5dcb6f8a62a4c6bc55cd9ba82bb2cd95f6c.svg'/>\n          </div>\n        </div>\n    </UserProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {BrowserRouter as Router} from 'react-router-dom'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}